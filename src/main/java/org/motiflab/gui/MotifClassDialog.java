/*
 * MotifClassDialog.java
 *
 * Created on 24. juli 2009, 19:42
 */

package org.motiflab.gui;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JLabel;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import org.jdesktop.application.Action;
import org.motiflab.engine.data.MotifClassification;

/**
 *
 * @author  kjetikl
 */
public class MotifClassDialog extends javax.swing.JDialog {
    private String selectedClass;
    private boolean okClicked=false;
    private JSearchTextField searchfield;
    private String previoussearchString="";

    /** Creates new form MotifClassDialog */
    public MotifClassDialog(java.awt.Frame parent, String currentClass) {
        super(parent, true);
        selectedClass=currentClass;
        initComponents();
        setTitle("Select motif class");
        classTree.setModel(MotifClassification.getClassTreeModel());
        classTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        classTree.setCellRenderer(new MotifClassTreeCellRenderer());
        getRootPane().setDefaultButton(OKButton);
        classTree.setRootVisible(false);
        if (selectedClass==null) classTree.setSelectionRow(0);
        else {
            TreePath path=new TreePath(MotifClassification.getPathToClass((DefaultMutableTreeNode)classTree.getModel().getRoot(),selectedClass));
            classTree.expandPath(path.getParentPath());
            classTree.setSelectionPath(path);
        }
        searchfield=new JSearchTextField();
        searchfield.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String text=searchfield.getText();
                if (text!=null && !text.isEmpty()) searchForText(text);
            }
        });
        searchPanel.add(searchfield);
    }

    public boolean isOKClicked() {
        return okClicked;
    }

    public String getSelectedClass() {
        return selectedClass;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        classTree = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        OKButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        searchPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(400, 400));
        setName("Form"); // NOI18N

        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 0, 10));
        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        classTree.setName("classTree"); // NOI18N
        jScrollPane1.setViewportView(classTree);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(100, 40));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(org.motiflab.gui.MotifLabApp.class).getContext().getActionMap(MotifClassDialog.class, this);
        OKButton.setAction(actionMap.get("okAction")); // NOI18N
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(org.motiflab.gui.MotifLabApp.class).getContext().getResourceMap(MotifClassDialog.class);
        OKButton.setText(resourceMap.getString("OKButton.text")); // NOI18N
        OKButton.setMaximumSize(new java.awt.Dimension(68, 27));
        OKButton.setMinimumSize(new java.awt.Dimension(68, 27));
        OKButton.setName("OKButton"); // NOI18N
        OKButton.setPreferredSize(new java.awt.Dimension(68, 27));
        jPanel3.add(OKButton);

        cancelButton.setAction(actionMap.get("cancelAction")); // NOI18N
        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setMaximumSize(new java.awt.Dimension(68, 27));
        cancelButton.setMinimumSize(new java.awt.Dimension(68, 27));
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.setPreferredSize(new java.awt.Dimension(68, 27));
        jPanel3.add(cancelButton);

        jPanel1.add(jPanel3, java.awt.BorderLayout.EAST);

        searchPanel.setName("searchPanel"); // NOI18N
        searchPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        jPanel1.add(searchPanel, java.awt.BorderLayout.WEST);

        jPanel2.add(jPanel1, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Action
    public void cancelAction() {
        okClicked=false;
        setVisible(false);
    }

    @Action
    public void okAction() {
        DefaultMutableTreeNode node=(DefaultMutableTreeNode)classTree.getSelectionPath().getLastPathComponent();
        selectedClass=(String)node.getUserObject();
        okClicked=true;
        setVisible(false);
    }

    private void searchForText(String searchstring) { // this search does not allow boolean operators
         TreeNode rootNode=(TreeNode)classTree.getModel().getRoot();
         TreePath selectedpath=classTree.getSelectionPath();
         TreeNode searchFromNode=null;
         if (selectedpath!=null && previoussearchString.equalsIgnoreCase(searchstring)) {
             searchFromNode=(TreeNode)selectedpath.getLastPathComponent();
         }
         previoussearchString=searchstring;
         boolean[] passedStartNode=new boolean[]{searchFromNode==null};
         TreeNode matchingnode=findNextRecursively(rootNode, searchFromNode, searchstring, passedStartNode);
         if (matchingnode!=null) {
             TreePath path=new TreePath(getPathToRoot(matchingnode,0));
             classTree.setSelectionPath(path);
             classTree.scrollPathToVisible(path);
         } else {
             previoussearchString=""; // this will reset the search and wrap around
         }
    }

    private TreeNode findNextRecursively(TreeNode parent, TreeNode searchFromNode, String searchstring, boolean[] passedStartNode) {
        int size=parent.getChildCount();
        for (int i=0;i<size;i++) {
            String nodetext;
            DefaultMutableTreeNode node=(DefaultMutableTreeNode)parent.getChildAt(i);;
            Object uservalue=node.getUserObject();
            if (uservalue==null) nodetext=("UNKNOWN CLASS");
            else {
               String classString=uservalue.toString();
               nodetext=(classString+" : "+MotifClassification.getNameForClass(classString));
            }
            if (nodetext.matches("(?i).*"+searchstring+".*")) {
                if (passedStartNode[0]) return node;
            }
            if (node==searchFromNode) passedStartNode[0]=true;
            if (!node.isLeaf()) {
               TreeNode found=findNextRecursively(node,searchFromNode,searchstring,passedStartNode);
               if (found!=null) return found;
            }
        }
        return null;
    }

    private TreeNode[] getPathToRoot(TreeNode aNode, int depth) {
        TreeNode[] retNodes;
        /* Check for null, in case someone passed in a null node, or
           they passed in an element that isn't rooted at root. */
        if(aNode == null) {
            if (depth == 0)return null;
            else retNodes = new TreeNode[depth];
        }
        else {
            depth++;
            retNodes = getPathToRoot(aNode.getParent(), depth);
            retNodes[retNodes.length - depth] = aNode;
        }
        return retNodes;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OKButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTree classTree;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel searchPanel;
    // End of variables declaration//GEN-END:variables


private class MotifClassTreeCellRenderer extends DefaultTreeCellRenderer {

   public MotifClassTreeCellRenderer() {
     super();
   }
    @Override
    public Component getTreeCellRendererComponent(JTree tree, Object value, boolean isSelected,boolean expanded,boolean leaf, int row,boolean hasFocus) {
        JLabel comp=(JLabel)super.getTreeCellRendererComponent(tree, value, isSelected, expanded, leaf, row, hasFocus);
        DefaultMutableTreeNode node=(DefaultMutableTreeNode)value;
        Object uservalue=node.getUserObject();
        if (uservalue==null) comp.setText("UNKNOWN CLASS");
        else {
           String classString=uservalue.toString();
           comp.setText(classString+" : "+MotifClassification.getNameForClass(classString));
        }
        if (leaf) comp.setIcon(null);
        else if (expanded) comp.setIcon(getOpenIcon());
        else  comp.setIcon(getClosedIcon());
        return comp;
    }

}

}
