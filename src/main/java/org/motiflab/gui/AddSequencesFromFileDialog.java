/*
 * AddSequencesFromFileDialog.java
 *
 * Created on 18. november 2009, 18:16
 */

package org.motiflab.gui;

import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import org.motiflab.engine.task.AddSequencesTask;
import org.motiflab.engine.ExecutionError;
import org.motiflab.engine.GeneIDResolver;
import org.motiflab.engine.MotifLabEngine;
import org.motiflab.engine.task.OperationTask;
import org.motiflab.engine.ParameterSettings;
import org.motiflab.engine.data.DNASequenceData;
import org.motiflab.engine.data.DNASequenceDataset;
import org.motiflab.engine.data.Organism;
import org.motiflab.engine.dataformat.DNASequenceParser;
import org.motiflab.engine.dataformat.DataFormat;
import org.motiflab.engine.operations.Operation;
import org.motiflab.engine.operations.Operation_new;

/**
 *
 * @author  kjetikl
 */
public class AddSequencesFromFileDialog extends javax.swing.JDialog {

     private MotifLabGUI gui;
     private LoadFromFilePanel loadFromFilePanel;

    /** Creates new form AddSequencesFromFileDialog */
    public AddSequencesFromFileDialog(MotifLabGUI gui) {
        super(gui.getFrame(), true);
        this.gui=gui;
        initComponents();
        ArrayList<DataFormat>formats=new ArrayList<DataFormat>();
        for (DataFormat format:gui.getEngine().getAllDataFormats()) {
            if (format instanceof DNASequenceParser) formats.add(format);
        }
        loadFromFilePanel=new LoadFromFilePanel(formats, gui, null);
        settingspanel.add(loadFromFilePanel);
        setMinimumSize(new Dimension(500,500));
        setPreferredSize(new Dimension(500,500));
        getRootPane().setDefaultButton(okButton);
        GeneIDResolver idResolver=gui.getEngine().getGeneIDResolver();
        int[] supportedOrganism=idResolver.getSupportedOrganisms();
        String[] organismNamesTmp=new String[supportedOrganism.length];
        for (int i=0;i<supportedOrganism.length;i++) {
            organismNamesTmp[i]=Organism.getCommonName(supportedOrganism[i]);
        }
        Arrays.sort(organismNamesTmp);
        String[] organismNames=new String[supportedOrganism.length+1];
        organismNames[0]="Unknown";
        System.arraycopy(organismNamesTmp, 0, organismNames, 1, supportedOrganism.length);
        organismCombobox.setModel(new DefaultComboBoxModel(organismNames));
        organismCombobox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String organismname=(String)organismCombobox.getSelectedItem();
                String[] supportedBuilds=null;
                if (organismname.equals("Unknown")) supportedBuilds=new String[]{"Unknown"};
                else {
                    int organismID=Organism.getTaxonomyID(organismname);
                    supportedBuilds=Organism.getSupportedGenomeBuilds(organismID);
                }
                if (supportedBuilds!=null) {
                    genomeBuildCombobox.setModel(new DefaultComboBoxModel(supportedBuilds));
                    genomeBuildCombobox.setEnabled(true);
                } else {
                    genomeBuildCombobox.setEnabled(false);
                }
            }
        });
        organismCombobox.setSelectedIndex(0);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        organismLabel = new javax.swing.JLabel();
        organismCombobox = new javax.swing.JComboBox();
        spacerlabel = new javax.swing.JLabel();
        buildLabel = new javax.swing.JLabel();
        genomeBuildCombobox = new javax.swing.JComboBox();
        settingspanel = new javax.swing.JPanel();
        buttonsPanel = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        addToProtocolCheckbox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(org.motiflab.gui.MotifLabApp.class).getContext().getResourceMap(AddSequencesFromFileDialog.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(100, 10));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 1));
        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jPanel4.setName("jPanel4"); // NOI18N

        organismLabel.setText(resourceMap.getString("organismLabel.text")); // NOI18N
        organismLabel.setName("organismLabel"); // NOI18N
        jPanel4.add(organismLabel);

        organismCombobox.setName("organismCombobox"); // NOI18N
        jPanel4.add(organismCombobox);

        spacerlabel.setText(resourceMap.getString("spacerlabel.text")); // NOI18N
        spacerlabel.setMinimumSize(new java.awt.Dimension(30, 14));
        spacerlabel.setName("spacerlabel"); // NOI18N
        spacerlabel.setPreferredSize(new java.awt.Dimension(30, 14));
        jPanel4.add(spacerlabel);

        buildLabel.setText(resourceMap.getString("buildLabel.text")); // NOI18N
        buildLabel.setName("buildLabel"); // NOI18N
        jPanel4.add(buildLabel);

        genomeBuildCombobox.setName("genomeBuildCombobox"); // NOI18N
        jPanel4.add(genomeBuildCombobox);

        jPanel2.add(jPanel4);

        jPanel3.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        settingspanel.setName("settingspanel"); // NOI18N
        settingspanel.setLayout(new java.awt.BorderLayout());
        jPanel3.add(settingspanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        buttonsPanel.setName("buttonsPanel"); // NOI18N
        buttonsPanel.setPreferredSize(new java.awt.Dimension(100, 46));

        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setMaximumSize(new java.awt.Dimension(72, 27));
        cancelButton.setMinimumSize(new java.awt.Dimension(72, 27));
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.setPreferredSize(new java.awt.Dimension(72, 27));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonClicked(evt);
            }
        });

        okButton.setText(resourceMap.getString("okButton.text")); // NOI18N
        okButton.setMaximumSize(new java.awt.Dimension(72, 27));
        okButton.setMinimumSize(new java.awt.Dimension(72, 27));
        okButton.setName("okButton"); // NOI18N
        okButton.setPreferredSize(new java.awt.Dimension(72, 27));
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonClicked(evt);
            }
        });

        addToProtocolCheckbox.setText(resourceMap.getString("addToProtocolCheckbox.text")); // NOI18N
        addToProtocolCheckbox.setName("addToProtocolCheckbox"); // NOI18N

        javax.swing.GroupLayout buttonsPanelLayout = new javax.swing.GroupLayout(buttonsPanel);
        buttonsPanel.setLayout(buttonsPanelLayout);
        buttonsPanelLayout.setHorizontalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addToProtocolCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        buttonsPanelLayout.setVerticalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addToProtocolCheckbox))
                .addContainerGap())
        );

        getContentPane().add(buttonsPanel, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void cancelButtonClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonClicked
    setVisible(false);//GEN-LAST:event_cancelButtonClicked
}

private void okButtonClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonClicked

    String DNAdatasetName="DNA";//GEN-LAST:event_okButtonClicked
    String filename=loadFromFilePanel.getFilename();
    if (filename==null) {
        JOptionPane.showMessageDialog(this, "Filename missing", "Import error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    DataFormat dataformat=loadFromFilePanel.getDataFormat();
    ParameterSettings settings=loadFromFilePanel.getParameterSettings();
    DNASequenceDataset dataset=null;
    try {
       dataset=loadSequences((DNASequenceParser)dataformat, filename, settings);
    } catch (Exception e) {
        String message=e.getMessage();
        if (message==null || message.isEmpty()) message=e.getClass().toString();
        JOptionPane.showMessageDialog(this, message, "Import error", JOptionPane.ERROR_MESSAGE);
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        return;
    }
    if (dataset==null) {
        JOptionPane.showMessageDialog(this, "No dataset returned", "Import error", JOptionPane.ERROR_MESSAGE);
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        return;
    }
    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    setVisible(false);
    int size=dataset.getSize();
    Object[][] sequenceSpecificationData=new Object[size][10];
    String selectedOrganism=(String)organismCombobox.getSelectedItem();
    String selectedBuild=(String)genomeBuildCombobox.getSelectedItem();
    int organism=Organism.getTaxonomyID(selectedOrganism);
    for (int i=0;i<size;i++) {
        DNASequenceData seq=(DNASequenceData)dataset.getSequenceByIndex(i);
        int useorganism=organism;
        if (seq.getTemporaryOrganism()!=null) useorganism=seq.getTemporaryOrganism();
        String usebuild=selectedBuild;
        if (seq.getTemporaryBuild()!=null) usebuild=seq.getTemporaryBuild();
        sequenceSpecificationData[i][0]=seq.getSequenceName();
        sequenceSpecificationData[i][1]=useorganism;
        sequenceSpecificationData[i][2]=usebuild;
        sequenceSpecificationData[i][3]=seq.getChromosome();
        sequenceSpecificationData[i][4]=seq.getRegionStart();
        sequenceSpecificationData[i][5]=seq.getRegionEnd();
        sequenceSpecificationData[i][6]=seq.getGeneName();
        sequenceSpecificationData[i][7]=seq.getTSS();
        sequenceSpecificationData[i][8]=seq.getTES();
        sequenceSpecificationData[i][9]=seq.getStrandOrientation();
    }
    AddSequencesTask addSequencesTask=new AddSequencesTask(gui.getEngine(), sequenceSpecificationData);
    if (addToProtocolCheckbox.isSelected()) {
        addSequencesTask.setFilename(filename);
        addSequencesTask.setDataFormat(dataformat.getName());
        addSequencesTask.setDataFormatSettings(settings);
    }
    gui.launchAddSequencesTask(addSequencesTask, (gui.isRecording() && addToProtocolCheckbox.isSelected()));
    Operation operation=gui.getEngine().getOperation("new");
    OperationTask newDNATrackTask=new OperationTask("new "+DNASequenceDataset.getType());
    newDNATrackTask.setParameter(OperationTask.OPERATION, operation);
    newDNATrackTask.setParameter(OperationTask.OPERATION_NAME, operation.getName());
    newDNATrackTask.setParameter(OperationTask.TARGET_NAME, DNAdatasetName);
    newDNATrackTask.setParameter(OperationTask.SOURCE_NAME, DNAdatasetName);
    newDNATrackTask.setParameter(Operation_new.DATA_TYPE, DNASequenceDataset.getType());
    newDNATrackTask.setParameter(Operation_new.PARAMETERS,Operation_new.FILE_PREFIX); // the FILE_PREFIX part of the parameter is necessary for proper recognition by Operation_new
    newDNATrackTask.setParameter(Operation_new.FILENAME,filename);
    newDNATrackTask.setParameter(Operation_new.DATA_FORMAT,dataformat.getName());
    newDNATrackTask.setParameter(Operation_new.DATA_FORMAT_SETTINGS,settings);
    gui.launchOperationTask(newDNATrackTask, gui.isRecording());
}


private DNASequenceDataset loadSequences(DNASequenceParser format, String filename, ParameterSettings settings) throws Exception {
    ArrayList<String>input=new ArrayList<String>();
    Object source=gui.getEngine().getDataSourceForString(filename);
    if (source instanceof File && !((File)source).exists()) throw new ExecutionError("File '"+filename+"' does not exist");
    if (source instanceof File && !((File)source).canRead()) throw new ExecutionError("Unable to read file '"+filename+"'");
    BufferedReader inputStream=null;
    try {
        InputStream stream=MotifLabEngine.getInputStreamForDataSource(source);
        inputStream=new BufferedReader(new InputStreamReader(stream));
        String line;
        int counter=0;
        while((line=inputStream.readLine())!=null) {
            if (counter%50==0 && Thread.interrupted()) { throw new InterruptedException();}
            counter++;
            input.add(line);
        }
    }
    catch (InterruptedException ie) {throw ie;}
    catch (Exception ioe) {
        throw new ExecutionError(ioe.getMessage(), ioe);
    } finally {
        try {if (inputStream!=null) inputStream.close();} catch (IOException ioe) {System.err.println("SYSTEM ERROR: An error occurred when closing BufferedReader: "+ioe.getMessage());}
    }
    try {
        DNASequenceDataset result=format.parseDNASequenceDataset(input, "DNA", settings);
        return result;
    }
    catch (InterruptedException ie) {throw ie;}
    catch (Exception e) {
        String message=e.getMessage();
        if (message==null || message.isEmpty()) message=e.getClass().toString();
        throw new ExecutionError(message, e);
    }
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox addToProtocolCheckbox;
    private javax.swing.JLabel buildLabel;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox genomeBuildCombobox;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton okButton;
    private javax.swing.JComboBox organismCombobox;
    private javax.swing.JLabel organismLabel;
    private javax.swing.JPanel settingspanel;
    private javax.swing.JLabel spacerlabel;
    // End of variables declaration//GEN-END:variables

}
