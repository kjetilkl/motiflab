/*
 * PriorityRegistration.java
 *
 * Created on 19. april 2010, 15:26
 */

package org.motiflab.external.priority;

import java.awt.CardLayout;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author  kjetikl
 */
public class PriorityRegistration extends javax.swing.JDialog {
    private HashMap<String,String> namesmap=new HashMap<String,String>();
    private ArrayList<String> states=new ArrayList<String>();
    private ArrayList<String> countries=new ArrayList<String>();
    private int step=1;
    private boolean licenseAccepted=false;

    /** Creates new form PriorityRegistration */
    public PriorityRegistration(java.awt.Frame parent, String license) {
        super(parent, true);
        initComponents();
        progressbar.setVisible(false);
        initValues();
        DefaultComboBoxModel statesmodel=new DefaultComboBoxModel(states.toArray());
        stateCombobox.setModel(statesmodel);
        DefaultComboBoxModel countriesmodel=new DefaultComboBoxModel(countries.toArray());
        countryCombobox.setModel(countriesmodel);
        ((CardLayout)mainpanel.getLayout()).show(mainpanel, "registrationCard");
        DocumentListener documentListener=new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {continueButton.setEnabled(validateForm());}
            @Override
            public void removeUpdate(DocumentEvent e)  {continueButton.setEnabled(validateForm());}
            @Override
            public void changedUpdate(DocumentEvent e)  {continueButton.setEnabled(validateForm());}
        };
        firstnameTextfield.getDocument().addDocumentListener(documentListener);
        lastnameTextfield.getDocument().addDocumentListener(documentListener);
        cityTextfield.getDocument().addDocumentListener(documentListener);
        emailTextfield.getDocument().addDocumentListener(documentListener);
        organizationTextfield.getDocument().addDocumentListener(documentListener);
        ActionListener comboboxListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {continueButton.setEnabled(validateForm());}
        };
        //stateCombobox.addActionListener(comboboxListener);
        countryCombobox.addActionListener(comboboxListener);
        licenseTextpane.setContentType("text/html");
        licenseTextpane.setText(license);
        licenseTextpane.setCaretPosition(0);
        licenseTextpane.setFocusable(false);

        Dimension d=new Dimension(590,550);
        this.setMinimumSize(d);
        this.setPreferredSize(d);
        this.setLocation((parent.getWidth()-d.width)/2, (parent.getHeight()-d.height)/2);
        pack();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonsPanel = new javax.swing.JPanel();
        continueButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        progressbar = new javax.swing.JProgressBar();
        mainpanel = new javax.swing.JPanel();
        registrationPanel = new javax.swing.JPanel();
        registrationHeaderPanel = new javax.swing.JPanel();
        toplabel3 = new javax.swing.JLabel();
        toplabel4 = new javax.swing.JLabel();
        registrationFormPanel = new javax.swing.JPanel();
        firstnameLabel = new javax.swing.JLabel();
        firstnameTextfield = new javax.swing.JTextField();
        lastnameLabel = new javax.swing.JLabel();
        lastnameTextfield = new javax.swing.JTextField();
        organizationLabel = new javax.swing.JLabel();
        organizationTextfield = new javax.swing.JTextField();
        cityLabel = new javax.swing.JLabel();
        cityTextfield = new javax.swing.JTextField();
        stateLabel = new javax.swing.JLabel();
        countryLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        notifyUpdatesCheckbox = new javax.swing.JCheckBox();
        countryCombobox = new javax.swing.JComboBox();
        emailTextfield = new javax.swing.JTextField();
        stateCombobox = new javax.swing.JComboBox();
        licensePanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        agreeCheckbox = new javax.swing.JCheckBox();
        licenseHeaderPanel = new javax.swing.JPanel();
        toplabel1 = new javax.swing.JLabel();
        toplabel2 = new javax.swing.JLabel();
        licenseMainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        licenseTextpane = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(org.motiflab.gui.MotifLabApp.class).getContext().getResourceMap(PriorityRegistration.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        buttonsPanel.setMinimumSize(new java.awt.Dimension(100, 40));
        buttonsPanel.setName("buttonsPanel"); // NOI18N
        buttonsPanel.setPreferredSize(new java.awt.Dimension(100, 46));

        continueButton.setText(resourceMap.getString("continueButton.text")); // NOI18N
        continueButton.setEnabled(false);
        continueButton.setMaximumSize(new java.awt.Dimension(90, 27));
        continueButton.setMinimumSize(new java.awt.Dimension(90, 27));
        continueButton.setName("continueButton"); // NOI18N
        continueButton.setPreferredSize(new java.awt.Dimension(90, 27));
        continueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueButtonClicked(evt);
            }
        });

        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setMaximumSize(new java.awt.Dimension(300, 27));
        cancelButton.setMinimumSize(new java.awt.Dimension(300, 27));
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.setPreferredSize(new java.awt.Dimension(300, 27));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonClicked(evt);
            }
        });

        jPanel1.setMinimumSize(new java.awt.Dimension(150, 27));
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(150, 27));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setName("jPanel2"); // NOI18N

        progressbar.setName("progressbar"); // NOI18N
        progressbar.setPreferredSize(new java.awt.Dimension(60, 16));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(progressbar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(progressbar, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(74, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout buttonsPanelLayout = new javax.swing.GroupLayout(buttonsPanel);
        buttonsPanel.setLayout(buttonsPanelLayout);
        buttonsPanelLayout.setHorizontalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                .addGap(1, 1, 1)
                .addComponent(continueButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        buttonsPanelLayout.setVerticalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(continueButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        getContentPane().add(buttonsPanel, java.awt.BorderLayout.PAGE_END);

        mainpanel.setName("mainpanel"); // NOI18N
        mainpanel.setLayout(new java.awt.CardLayout());

        registrationPanel.setName("registrationPanel"); // NOI18N
        registrationPanel.setLayout(new java.awt.BorderLayout());

        registrationHeaderPanel.setBackground(resourceMap.getColor("registrationHeaderPanel.background")); // NOI18N
        registrationHeaderPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        registrationHeaderPanel.setName("registrationHeaderPanel"); // NOI18N
        registrationHeaderPanel.setLayout(new javax.swing.BoxLayout(registrationHeaderPanel, javax.swing.BoxLayout.Y_AXIS));

        toplabel3.setFont(resourceMap.getFont("toplabel3.font")); // NOI18N
        toplabel3.setText(resourceMap.getString("toplabel3.text")); // NOI18N
        toplabel3.setName("toplabel3"); // NOI18N
        registrationHeaderPanel.add(toplabel3);

        toplabel4.setFont(resourceMap.getFont("toplabel4.font")); // NOI18N
        toplabel4.setText(resourceMap.getString("toplabel4.text")); // NOI18N
        toplabel4.setName("toplabel4"); // NOI18N
        registrationHeaderPanel.add(toplabel4);

        registrationPanel.add(registrationHeaderPanel, java.awt.BorderLayout.PAGE_START);

        registrationFormPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 6, 10, 6));
        registrationFormPanel.setName("registrationFormPanel"); // NOI18N

        firstnameLabel.setText(resourceMap.getString("firstnameLabel.text")); // NOI18N
        firstnameLabel.setMaximumSize(new java.awt.Dimension(95, 14));
        firstnameLabel.setMinimumSize(new java.awt.Dimension(95, 14));
        firstnameLabel.setName("firstnameLabel"); // NOI18N
        firstnameLabel.setPreferredSize(new java.awt.Dimension(95, 14));

        firstnameTextfield.setText(resourceMap.getString("firstnameTextfield.text")); // NOI18N
        firstnameTextfield.setName("firstnameTextfield"); // NOI18N

        lastnameLabel.setText(resourceMap.getString("lastnameLabel.text")); // NOI18N
        lastnameLabel.setMaximumSize(new java.awt.Dimension(95, 14));
        lastnameLabel.setMinimumSize(new java.awt.Dimension(95, 14));
        lastnameLabel.setName("lastnameLabel"); // NOI18N
        lastnameLabel.setPreferredSize(new java.awt.Dimension(95, 14));

        lastnameTextfield.setText(resourceMap.getString("lastnameTextfield.text")); // NOI18N
        lastnameTextfield.setName("lastnameTextfield"); // NOI18N

        organizationLabel.setText(resourceMap.getString("organizationLabel.text")); // NOI18N
        organizationLabel.setMaximumSize(new java.awt.Dimension(95, 14));
        organizationLabel.setMinimumSize(new java.awt.Dimension(95, 14));
        organizationLabel.setName("organizationLabel"); // NOI18N
        organizationLabel.setPreferredSize(new java.awt.Dimension(95, 14));

        organizationTextfield.setText(resourceMap.getString("organizationTextfield.text")); // NOI18N
        organizationTextfield.setName("organizationTextfield"); // NOI18N

        cityLabel.setText(resourceMap.getString("cityLabel.text")); // NOI18N
        cityLabel.setMaximumSize(new java.awt.Dimension(95, 14));
        cityLabel.setMinimumSize(new java.awt.Dimension(95, 14));
        cityLabel.setName("cityLabel"); // NOI18N
        cityLabel.setPreferredSize(new java.awt.Dimension(95, 14));

        cityTextfield.setText(resourceMap.getString("cityTextfield.text")); // NOI18N
        cityTextfield.setName("cityTextfield"); // NOI18N

        stateLabel.setText(resourceMap.getString("stateLabel.text")); // NOI18N
        stateLabel.setMaximumSize(new java.awt.Dimension(95, 14));
        stateLabel.setMinimumSize(new java.awt.Dimension(95, 14));
        stateLabel.setName("stateLabel"); // NOI18N
        stateLabel.setPreferredSize(new java.awt.Dimension(95, 14));

        countryLabel.setText(resourceMap.getString("countryLabel.text")); // NOI18N
        countryLabel.setMaximumSize(new java.awt.Dimension(95, 14));
        countryLabel.setMinimumSize(new java.awt.Dimension(95, 14));
        countryLabel.setName("countryLabel"); // NOI18N
        countryLabel.setPreferredSize(new java.awt.Dimension(95, 14));

        emailLabel.setText(resourceMap.getString("emailLabel.text")); // NOI18N
        emailLabel.setMaximumSize(new java.awt.Dimension(95, 14));
        emailLabel.setMinimumSize(new java.awt.Dimension(95, 14));
        emailLabel.setName("emailLabel"); // NOI18N
        emailLabel.setPreferredSize(new java.awt.Dimension(95, 14));

        notifyUpdatesCheckbox.setFont(resourceMap.getFont("notifyUpdatesCheckbox.font")); // NOI18N
        notifyUpdatesCheckbox.setText(resourceMap.getString("notifyUpdatesCheckbox.text")); // NOI18N
        notifyUpdatesCheckbox.setName("notifyUpdatesCheckbox"); // NOI18N

        countryCombobox.setName("countryCombobox"); // NOI18N

        emailTextfield.setText(resourceMap.getString("emailTextfield.text")); // NOI18N
        emailTextfield.setName("emailTextfield"); // NOI18N

        stateCombobox.setName("stateCombobox"); // NOI18N

        javax.swing.GroupLayout registrationFormPanelLayout = new javax.swing.GroupLayout(registrationFormPanel);
        registrationFormPanel.setLayout(registrationFormPanelLayout);
        registrationFormPanelLayout.setHorizontalGroup(
            registrationFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(registrationFormPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(registrationFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(registrationFormPanelLayout.createSequentialGroup()
                        .addGroup(registrationFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(organizationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastnameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(firstnameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(stateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(countryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(emailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(registrationFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(emailTextfield)
                            .addComponent(countryCombobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cityTextfield)
                            .addComponent(firstnameTextfield, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                            .addComponent(lastnameTextfield, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(organizationTextfield, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                            .addComponent(stateCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(notifyUpdatesCheckbox))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        registrationFormPanelLayout.setVerticalGroup(
            registrationFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(registrationFormPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(registrationFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstnameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(firstnameTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(registrationFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastnameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lastnameTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(registrationFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(organizationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(organizationTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(registrationFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cityTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(registrationFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stateCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(registrationFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(countryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(countryCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(registrationFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(notifyUpdatesCheckbox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        registrationPanel.add(registrationFormPanel, java.awt.BorderLayout.CENTER);

        mainpanel.add(registrationPanel, "registrationCard");

        licensePanel.setName("licensePanel"); // NOI18N
        licensePanel.setLayout(new java.awt.BorderLayout());

        jPanel3.setMinimumSize(new java.awt.Dimension(100, 30));
        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setPreferredSize(new java.awt.Dimension(100, 30));

        agreeCheckbox.setText(resourceMap.getString("agreeCheckbox.text")); // NOI18N
        agreeCheckbox.setName("agreeCheckbox"); // NOI18N
        agreeCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptLicenseChecked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(agreeCheckbox)
                .addContainerGap(263, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(agreeCheckbox))
        );

        licensePanel.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        licenseHeaderPanel.setBackground(resourceMap.getColor("licenseHeaderPanel.background")); // NOI18N
        licenseHeaderPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        licenseHeaderPanel.setName("licenseHeaderPanel"); // NOI18N
        licenseHeaderPanel.setLayout(new javax.swing.BoxLayout(licenseHeaderPanel, javax.swing.BoxLayout.Y_AXIS));

        toplabel1.setFont(resourceMap.getFont("toplabel1.font")); // NOI18N
        toplabel1.setText(resourceMap.getString("toplabel1.text")); // NOI18N
        toplabel1.setName("toplabel1"); // NOI18N
        licenseHeaderPanel.add(toplabel1);

        toplabel2.setText(resourceMap.getString("toplabel2.text")); // NOI18N
        toplabel2.setName("toplabel2"); // NOI18N
        licenseHeaderPanel.add(toplabel2);

        licensePanel.add(licenseHeaderPanel, java.awt.BorderLayout.PAGE_START);

        licenseMainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 8, 1, 8));
        licenseMainPanel.setName("licenseMainPanel"); // NOI18N
        licenseMainPanel.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        licenseTextpane.setName("licenseTextpane"); // NOI18N
        jScrollPane1.setViewportView(licenseTextpane);

        licenseMainPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        licensePanel.add(licenseMainPanel, java.awt.BorderLayout.CENTER);

        mainpanel.add(licensePanel, "licenseCard");

        getContentPane().add(mainpanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void cancelButtonClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonClicked
// TODO add your handling code here:
    setVisible(false);//GEN-LAST:event_cancelButtonClicked
}

private void continueButtonClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continueButtonClicked
// TODO add your handling code here:
    if (step==2) sendRegistration();//GEN-LAST:event_continueButtonClicked
    else proceedToLicense();
}

private void acceptLicenseChecked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptLicenseChecked
// TODO add your handling code here:
    continueButton.setEnabled(agreeCheckbox.isSelected());//GEN-LAST:event_acceptLicenseChecked
}


private void proceedToLicense() {
    ((CardLayout)mainpanel.getLayout()).show(mainpanel, "licenseCard");
    continueButton.setEnabled(false);
    //pack();
    step=2;
}


public boolean isLicenseAccepted() {
    return licenseAccepted;
}

// Checks to see if the form is properly filled in
private boolean validateForm() {
         if (firstnameTextfield.getText().trim().isEmpty()) return false;
    else if (lastnameTextfield.getText().trim().isEmpty()) return false;
    else if (organizationTextfield.getText().trim().isEmpty()) return false;
    else if (cityTextfield.getText().trim().isEmpty()) return false;
    else if (emailTextfield.getText().trim().isEmpty()) return false;
    else if (!emailTextfield.getText().trim().matches("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$")) return false;
    else if (((String)countryCombobox.getSelectedItem()).equalsIgnoreCase("Please select a country")) return false;
    else return true;
}





private void sendRegistration() {
    progressbar.setVisible(true);
    progressbar.setIndeterminate(true);
    this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    String firstName=firstnameTextfield.getText().trim();
    String lastName=lastnameTextfield.getText().trim();
    String organization="NOPE:"+organizationTextfield.getText().trim(); // Alexander Hartemink requested that this field be prefixed with "NOPE:" (Norway MotifLab) so that they could keep track of how many users registered PRIORITY via MotifLab
    String city=cityTextfield.getText().trim();
    String email=emailTextfield.getText().trim();
    String state=(String)stateCombobox.getSelectedItem();
    state=namesmap.get(state);
    String country=(String)countryCombobox.getSelectedItem();
    country=namesmap.get(country);
    try {
        URL                 url;
        URLConnection   urlConn;
        DataOutputStream    printout;
        DataInputStream     input;
        url = new URL ("https://www.cs.duke.edu/~amink/software/priority/download/index.html");
        urlConn = url.openConnection();
        urlConn.setDoInput (true);
        urlConn.setDoOutput (true);
        urlConn.setUseCaches (false);
        urlConn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
        printout = new DataOutputStream (urlConn.getOutputStream ());
        String content =
        "firstname=" + URLEncoder.encode (firstName,"UTF-8") +
        "&lastname=" + URLEncoder.encode (lastName,"UTF-8") +
        "&org=" + URLEncoder.encode (organization,"UTF-8") +
        "&city=" + URLEncoder.encode (city,"UTF-8") +
        "&stateprov=" + URLEncoder.encode (state,"UTF-8") +
        "&country=" + URLEncoder.encode (country,"UTF-8") +
        "&email=" + URLEncoder.encode (email,"UTF-8");
        if (notifyUpdatesCheckbox.isSelected()) content+="&sendupdate=Y";
        content+="&accept=Y";
        content+="&submit=Submit";
        printout.writeBytes (content);
        printout.flush ();
        printout.close ();
        // Get response data.
        input = new DataInputStream (urlConn.getInputStream());
        BufferedReader reader=new BufferedReader(new InputStreamReader(input));
        String str;
        while (null != ((str = reader.readLine()))){
            // System.out.println(str);
        }
        input.close ();
    } catch (Exception e) {
      JOptionPane.showMessageDialog(this, e.getMessage(),"ERROR!",JOptionPane.ERROR_MESSAGE);
      progressbar.setVisible(false);
      this.setCursor(Cursor.getDefaultCursor());
      return;
    }
    licenseAccepted=true;
    progressbar.setVisible(false);
    this.setCursor(Cursor.getDefaultCursor());
    setVisible(false);
}

private void initValues() {
    states.add("Select a state/province");
    states.add("Alabama");
    states.add("Alaska");
    states.add("Alberta");
    states.add("American Samoa");
    states.add("Arizona");
    states.add("Arkansas");
    states.add("British Columbia");
    states.add("California");
    states.add("Colorado");
    states.add("Connecticut");
    states.add("Delaware");
    states.add("District of Columbia");
    states.add("Florida");
    states.add("Georgia");
    states.add("Guam");
    states.add("Hawaii");
    states.add("Idaho");
    states.add("Illinois");
    states.add("Indiana");
    states.add("Iowa");
    states.add("Kansas");
    states.add("Kentucky");
    states.add("Louisiana");
    states.add("Maine");
    states.add("Manitoba");
    states.add("Marshall Islands");
    states.add("Maryland");
    states.add("Massachusetts");
    states.add("Michigan");
    states.add("Minnesota");
    states.add("Mississippi");
    states.add("Missouri");
    states.add("Montana");
    states.add("Nebraska");
    states.add("Nevada");
    states.add("New Brunswick");
    states.add("New Hampshire");
    states.add("New Jersey");
    states.add("New Mexico");
    states.add("New York");
    states.add("Newfoundland");
    states.add("North Carolina");
    states.add("North Dakota");
    states.add("Northern Mariana Islands");
    states.add("Northwest Territories");
    states.add("Nova Scotia");
    states.add("Nunavut");
    states.add("Ohio");
    states.add("Oklahoma");
    states.add("Ontario");
    states.add("Oregon");
    states.add("Palau");
    states.add("Pennsylvania");
    states.add("Prince Edward Island");
    states.add("Puerto Rico");
    states.add("Quebec");
    states.add("Rhode Island");
    states.add("Saskatchewan");
    states.add("South Carolina");
    states.add("South Dakota");
    states.add("Tennessee");
    states.add("Texas");
    states.add("Utah");
    states.add("Vermont");
    states.add("Virginia");
    states.add("U.S. Virgin Islands");
    states.add("Washington");
    states.add("West Virginia");
    states.add("Wisconsin");
    states.add("Wyoming");
    states.add("Yukon Territory");
    countries.add("Please select a country");
    countries.add("Afghanistan");
    countries.add("Albania");
    countries.add("Algeria");
    countries.add("American Samoa");
    countries.add("Andorra");
    countries.add("Angola");
    countries.add("Anguilla");
    countries.add("Antarctica");
    countries.add("Antigua And Barbuda");
    countries.add("Argentina");
    countries.add("Armenia");
    countries.add("Aruba");
    countries.add("Australia");
    countries.add("Austria");
    countries.add("Azerbaijan");
    countries.add("Bahamas");
    countries.add("Bahrain");
    countries.add("Bangladesh");
    countries.add("Barbados");
    countries.add("Belarus");
    countries.add("Belgium");
    countries.add("Belize");
    countries.add("Benin");
    countries.add("Bermuda");
    countries.add("Bhutan");
    countries.add("Bolivia");
    countries.add("Bosnia And Herzegovina");
    countries.add("Botswana");
    countries.add("Bouvet Island");
    countries.add("Brazil");
    countries.add("British Indian Ocean Territory");
    countries.add("Brunei Darussalam");
    countries.add("Bulgaria");
    countries.add("Burkina Faso");
    countries.add("Burundi");
    countries.add("Cambodia");
    countries.add("Cameroon");
    countries.add("Canada");
    countries.add("Cape Verde");
    countries.add("Cayman Islands");
    countries.add("Central African Republic");
    countries.add("Chad");
    countries.add("Chile");
    countries.add("China");
    countries.add("Christmas Island");
    countries.add("Cocos (Keeling) Islands");
    countries.add("Colombia");
    countries.add("Comoros");
    countries.add("Congo");
    countries.add("Zaire (Congo, The Democratic Republic of the)");
    countries.add("Cook Islands");
    countries.add("Costa Rica");
    countries.add("Cote D'ivoire");
    countries.add("Croatia");
    countries.add("Cuba");
    countries.add("Cyprus");
    countries.add("Czech Republic");
    countries.add("Denmark");
    countries.add("Djibouti");
    countries.add("Dominica");
    countries.add("Dominican Republic");
    countries.add("East Timor");
    countries.add("Ecuador");
    countries.add("Egypt");
    countries.add("El Salvador");
    countries.add("Equatorial Guinea");
    countries.add("Eritrea");
    countries.add("Estonia");
    countries.add("Ethiopia");
    countries.add("Falkland Islands (Malvinas)");
    countries.add("Faroe Islands");
    countries.add("Fiji");
    countries.add("Finland");
    countries.add("France");
    countries.add("French Guiana");
    countries.add("French Polynesia");
    countries.add("French Southern Territories");
    countries.add("Gabon");
    countries.add("Gambia");
    countries.add("Georgia");
    countries.add("Germany");
    countries.add("Ghana");
    countries.add("Gibraltar");
    countries.add("Greece");
    countries.add("Greenland");
    countries.add("Grenada");
    countries.add("Guadeloupe");
    countries.add("Guam");
    countries.add("Guatemala");
    countries.add("Guinea");
    countries.add("Guinea-Bissau");
    countries.add("Guyana");
    countries.add("Haiti");
    countries.add("Heard Island and Mcdonald Islands");
    countries.add("Honduras");
    countries.add("Hong Kong");
    countries.add("Hungary");
    countries.add("Iceland");
    countries.add("India");
    countries.add("Indonesia");
    countries.add("Iran");
    countries.add("Iraq");
    countries.add("Ireland");
    countries.add("Israel");
    countries.add("Italy");
    countries.add("Jamaica");
    countries.add("Japan");
    countries.add("Jordan");
    countries.add("Kazakstan");
    countries.add("Kenya");
    countries.add("Kiribati");
    countries.add("Korea, North");
    countries.add("Korea, South");
    countries.add("Kuwait");
    countries.add("Kyrgyzstan");
    countries.add("Laos");
    countries.add("Latvia");
    countries.add("Lebanon");
    countries.add("Lesotho");
    countries.add("Liberia");
    countries.add("Libyan Arab Jamahiriya");
    countries.add("Liechtenstein");
    countries.add("Lithuania");
    countries.add("Luxembourg");
    countries.add("Macau");
    countries.add("Macedonia");
    countries.add("Madagascar");
    countries.add("Malawi");
    countries.add("Malaysia");
    countries.add("Maldives");
    countries.add("Mali");
    countries.add("Malta");
    countries.add("Marshall Islands");
    countries.add("Martinique");
    countries.add("Mauritania");
    countries.add("Mauritius");
    countries.add("Mayotte");
    countries.add("Mexico");
    countries.add("Micronesia, Federated States of");
    countries.add("Moldova");
    countries.add("Monaco");
    countries.add("Mongolia");
    countries.add("Montserrat");
    countries.add("Morocco");
    countries.add("Mozambique");
    countries.add("Myanmar");
    countries.add("Namibia");
    countries.add("Nauru");
    countries.add("Nepal");
    countries.add("Netherlands");
    countries.add("Netherlands Antilles");
    countries.add("New Caledonia");
    countries.add("New Zealand");
    countries.add("Nicaragua");
    countries.add("Niger");
    countries.add("Nigeria");
    countries.add("Niue");
    countries.add("Norfolk Island");
    countries.add("Northern Mariana Islands");
    countries.add("Norway");
    countries.add("Oman");
    countries.add("Pakistan");
    countries.add("Palau");
    countries.add("Palestinian Territory, Occupied");
    countries.add("Panama");
    countries.add("Papua New Guinea");
    countries.add("Paraguay");
    countries.add("Peru");
    countries.add("Philippines");
    countries.add("Pitcairn");
    countries.add("Poland");
    countries.add("Portugal");
    countries.add("Puerto Rico");
    countries.add("Qatar");
    countries.add("Reunion");
    countries.add("Romania");
    countries.add("Russian Federation");
    countries.add("Rwanda");
    countries.add("Saint Helena");
    countries.add("Saint Kitts And Nevis");
    countries.add("Saint Lucia");
    countries.add("Saint Pierre and Miquelon");
    countries.add("Saint Vincent and the Grenadines");
    countries.add("Samoa");
    countries.add("San Marino");
    countries.add("Sao Tome and Principe");
    countries.add("Saudi Arabia");
    countries.add("Senegal");
    countries.add("Seychelles");
    countries.add("Sierra Leone");
    countries.add("Singapore");
    countries.add("Slovakia");
    countries.add("Slovenia");
    countries.add("Solomon Islands");
    countries.add("Somalia");
    countries.add("South Africa");
    countries.add("South Georgia and the South Sandwich Islands");
    countries.add("Spain");
    countries.add("Sri Lanka");
    countries.add("Sudan");
    countries.add("Suriname");
    countries.add("Svalbard and Jan Mayen");
    countries.add("Swaziland");
    countries.add("Sweden");
    countries.add("Switzerland");
    countries.add("Syrian Arab Republic");
    countries.add("Taiwan");
    countries.add("Tajikistan");
    countries.add("Tanzania");
    countries.add("Thailand");
    countries.add("Togo");
    countries.add("Tokelau");
    countries.add("Tonga");
    countries.add("Trinidad and Tobago");
    countries.add("Tunisia");
    countries.add("Turkey");
    countries.add("Turkmenistan");
    countries.add("Turks and Caicos Islands");
    countries.add("Tuvalu");
    countries.add("Uganda");
    countries.add("Ukraine");
    countries.add("United Arab Emirates");
    countries.add("United Kingdom");
    countries.add("United States");
    countries.add("United States Minor Outlying Islands");
    countries.add("Uruguay");
    countries.add("Uzbekistan");
    countries.add("Vanuatu");
    countries.add("Vatican City");
    countries.add("Venezuela");
    countries.add("Vietnam");
    countries.add("Virgin Islands, British");
    countries.add("Virgin Islands, U.S.");
    countries.add("Wallis and Futuna");
    countries.add("Western Sahara");
    countries.add("Yemen");
    countries.add("Yugoslavia");
    countries.add("Zambia");
    countries.add("Zimbabwe");
    namesmap.put("Please select a country", "");
    namesmap.put("Select a state/province","");
    namesmap.put("Alabama","AL");
    namesmap.put("Alaska","AK");
    namesmap.put("Alberta","AB");
    namesmap.put("American Samoa","AS");
    namesmap.put("Arizona","AZ");
    namesmap.put("Arkansas","AR");
    namesmap.put("British Columbia","BC");
    namesmap.put("California","CA");
    namesmap.put("Colorado","CO");
    namesmap.put("Connecticut","CT");
    namesmap.put("Delaware","DE");
    namesmap.put("District of Columbia","DC");
    namesmap.put("Florida","FL");
    namesmap.put("Georgia","GA");
    namesmap.put("Guam","GU");
    namesmap.put("Hawaii","HI");
    namesmap.put("Idaho","ID");
    namesmap.put("Illinois","IL");
    namesmap.put("Indiana","IN");
    namesmap.put("Iowa","IA");
    namesmap.put("Kansas","KS");
    namesmap.put("Kentucky","KY");
    namesmap.put("Louisiana","LA");
    namesmap.put("Maine","ME");
    namesmap.put("Manitoba","MB");
    namesmap.put("Marshall Islands","MH");
    namesmap.put("Maryland","MD");
    namesmap.put("Massachusetts","MA");
    namesmap.put("Michigan","MI");
    namesmap.put("Minnesota","MN");
    namesmap.put("Mississippi","MS");
    namesmap.put("Missouri","MO");
    namesmap.put("Montana","MT");
    namesmap.put("Nebraska","NE");
    namesmap.put("Nevada","NV");
    namesmap.put("New Brunswick","NB");
    namesmap.put("New Hampshire","NH");
    namesmap.put("New Jersey","NJ");
    namesmap.put("New Mexico","NM");
    namesmap.put("New York","NY");
    namesmap.put("Newfoundland","NF");
    namesmap.put("North Carolina","NC");
    namesmap.put("North Dakota","ND");
    namesmap.put("Northern Mariana Islands","MP");
    namesmap.put("Northwest Territories","NT");
    namesmap.put("Nova Scotia","NS");
    namesmap.put("Nunavut","NU");
    namesmap.put("Ohio","OH");
    namesmap.put("Oklahoma","OK");
    namesmap.put("Ontario","ON");
    namesmap.put("Oregon","OR");
    namesmap.put("Palau","PW");
    namesmap.put("Pennsylvania","PA");
    namesmap.put("Prince Edward Island","PE");
    namesmap.put("Puerto Rico","PR");
    namesmap.put("Quebec","QC");
    namesmap.put("Rhode Island","RI");
    namesmap.put("Saskatchewan","SK");
    namesmap.put("South Carolina","SC");
    namesmap.put("South Dakota","SD");
    namesmap.put("Tennessee","TN");
    namesmap.put("Texas","TX");
    namesmap.put("Utah","UT");
    namesmap.put("Vermont","VT");
    namesmap.put("Virginia","VA");
    namesmap.put("U.S. Virgin Islands","VI");
    namesmap.put("Washington","WA");
    namesmap.put("West Virginia","WV");
    namesmap.put("Wisconsin","WI");
    namesmap.put("Wyoming","WY");
    namesmap.put("Yukon Territory","YT");

    namesmap.put("Afghanistan","AF");
    namesmap.put("Albania","AL");
    namesmap.put("Algeria","DZ");
    namesmap.put("American Samoa","AS");
    namesmap.put("Andorra","AD");
    namesmap.put("Angola","AO");
    namesmap.put("Anguilla","AI");
    namesmap.put("Antarctica","AQ");
    namesmap.put("Antigua And Barbuda","AG");
    namesmap.put("Argentina","AR");
    namesmap.put("Armenia","AM");
    namesmap.put("Aruba","AW");
    namesmap.put("Australia","AU");
    namesmap.put("Austria","AT");
    namesmap.put("Azerbaijan","AZ");
    namesmap.put("Bahamas","BS");
    namesmap.put("Bahrain","BH");
    namesmap.put("Bangladesh","BD");
    namesmap.put("Barbados","BB");
    namesmap.put("Belarus","BY");
    namesmap.put("Belgium","BE");
    namesmap.put("Belize","BZ");
    namesmap.put("Benin","BJ");
    namesmap.put("Bermuda","BM");
    namesmap.put("Bhutan","BT");
    namesmap.put("Bolivia","BO");
    namesmap.put("Bosnia And Herzegovina","BA");
    namesmap.put("Botswana","BW");
    namesmap.put("Bouvet Island","BV");
    namesmap.put("Brazil","BR");
    namesmap.put("British Indian Ocean Territory","IO");
    namesmap.put("Brunei Darussalam","BN");
    namesmap.put("Bulgaria","BG");
    namesmap.put("Burkina Faso","BF");
    namesmap.put("Burundi","BI");
    namesmap.put("Cambodia","KH");
    namesmap.put("Cameroon","CM");
    namesmap.put("Canada","CA");
    namesmap.put("Cape Verde","CV");
    namesmap.put("Cayman Islands","KY");
    namesmap.put("Central African Republic","CF");
    namesmap.put("Chad","TD");
    namesmap.put("Chile","CL");
    namesmap.put("China","CN");
    namesmap.put("Christmas Island","CX");
    namesmap.put("Cocos (Keeling) Islands","CC");
    namesmap.put("Colombia","CO");
    namesmap.put("Comoros","KM");
    namesmap.put("Congo","CG");
    namesmap.put("Zaire (Congo, The Democratic Republic of the)","CD");
    namesmap.put("Cook Islands","CK");
    namesmap.put("Costa Rica","CR");
    namesmap.put("Cote D'ivoire","CI");
    namesmap.put("Croatia","HR");
    namesmap.put("Cuba","CU");
    namesmap.put("Cyprus","CY");
    namesmap.put("Czech Republic","CZ");
    namesmap.put("Denmark","DK");
    namesmap.put("Djibouti","DJ");
    namesmap.put("Dominica","DM");
    namesmap.put("Dominican Republic","DO");
    namesmap.put("East Timor","TP");
    namesmap.put("Ecuador","EC");
    namesmap.put("Egypt","EG");
    namesmap.put("El Salvador","SV");
    namesmap.put("Equatorial Guinea","GQ");
    namesmap.put("Eritrea","ER");
    namesmap.put("Estonia","EE");
    namesmap.put("Ethiopia","ET");
    namesmap.put("Falkland Islands (Malvinas)","FK");
    namesmap.put("Faroe Islands","FO");
    namesmap.put("Fiji","FJ");
    namesmap.put("Finland","FI");
    namesmap.put("France","FR");
    namesmap.put("French Guiana","GF");
    namesmap.put("French Polynesia","PF");
    namesmap.put("French Southern Territories","TF");
    namesmap.put("Gabon","GA");
    namesmap.put("Gambia","GM");
    namesmap.put("Georgia","GE");
    namesmap.put("Germany","DE");
    namesmap.put("Ghana","GH");
    namesmap.put("Gibraltar","GI");
    namesmap.put("Greece","GR");
    namesmap.put("Greenland","GL");
    namesmap.put("Grenada","GD");
    namesmap.put("Guadeloupe","GP");
    namesmap.put("Guam","GU");
    namesmap.put("Guatemala","GT");
    namesmap.put("Guinea","GN");
    namesmap.put("Guinea-Bissau","GW");
    namesmap.put("Guyana","GY");
    namesmap.put("Haiti","HT");
    namesmap.put("Heard Island and Mcdonald Islands","HM");
    namesmap.put("Honduras","HN");
    namesmap.put("Hong Kong","HK");
    namesmap.put("Hungary","HU");
    namesmap.put("Iceland","IS");
    namesmap.put("India","IN");
    namesmap.put("Indonesia","ID");
    namesmap.put("Iran","IR");
    namesmap.put("Iraq","IQ");
    namesmap.put("Ireland","IE");
    namesmap.put("Israel","IL");
    namesmap.put("Italy","IT");
    namesmap.put("Jamaica","JM");
    namesmap.put("Japan","JP");
    namesmap.put("Jordan","JO");
    namesmap.put("Kazakstan","KZ");
    namesmap.put("Kenya","KE");
    namesmap.put("Kiribati","KI");
    namesmap.put("Korea, North","KP");
    namesmap.put("Korea, South","KR");
    namesmap.put("Kuwait","KW");
    namesmap.put("Kyrgyzstan","KG");
    namesmap.put("Laos","LA");
    namesmap.put("Latvia","LV");
    namesmap.put("Lebanon","LB");
    namesmap.put("Lesotho","LS");
    namesmap.put("Liberia","LR");
    namesmap.put("Libyan Arab Jamahiriya","LY");
    namesmap.put("Liechtenstein","LI");
    namesmap.put("Lithuania","LT");
    namesmap.put("Luxembourg","LU");
    namesmap.put("Macau","MO");
    namesmap.put("Macedonia","MK");
    namesmap.put("Madagascar","MG");
    namesmap.put("Malawi","MW");
    namesmap.put("Malaysia","MY");
    namesmap.put("Maldives","MV");
    namesmap.put("Mali","ML");
    namesmap.put("Malta","MT");
    namesmap.put("Marshall Islands","MH");
    namesmap.put("Martinique","MQ");
    namesmap.put("Mauritania","MR");
    namesmap.put("Mauritius","MU");
    namesmap.put("Mayotte","YT");
    namesmap.put("Mexico","MX");
    namesmap.put("Micronesia, Federated States of","FM");
    namesmap.put("Moldova","MD");
    namesmap.put("Monaco","MC");
    namesmap.put("Mongolia","MN");
    namesmap.put("Montserrat","MS");
    namesmap.put("Morocco","MA");
    namesmap.put("Mozambique","MZ");
    namesmap.put("Myanmar","MM");
    namesmap.put("Namibia","NA");
    namesmap.put("Nauru","NR");
    namesmap.put("Nepal","NP");
    namesmap.put("Netherlands","NL");
    namesmap.put("Netherlands Antilles","AN");
    namesmap.put("New Caledonia","NC");
    namesmap.put("New Zealand","NZ");
    namesmap.put("Nicaragua","NI");
    namesmap.put("Niger","NE");
    namesmap.put("Nigeria","NG");
    namesmap.put("Niue","NU");
    namesmap.put("Norfolk Island","NF");
    namesmap.put("Northern Mariana Islands","MP");
    namesmap.put("Norway","NO");
    namesmap.put("Oman","OM");
    namesmap.put("Pakistan","PK");
    namesmap.put("Palau","PW");
    namesmap.put("Palestinian Territory, Occupied","PS");
    namesmap.put("Panama","PA");
    namesmap.put("Papua New Guinea","PG");
    namesmap.put("Paraguay","PY");
    namesmap.put("Peru","PE");
    namesmap.put("Philippines","PH");
    namesmap.put("Pitcairn","PN");
    namesmap.put("Poland","PL");
    namesmap.put("Portugal","PT");
    namesmap.put("Puerto Rico","PR");
    namesmap.put("Qatar","QA");
    namesmap.put("Reunion","RE");
    namesmap.put("Romania","RO");
    namesmap.put("Russian Federation","RU");
    namesmap.put("Rwanda","RW");
    namesmap.put("Saint Helena","SH");
    namesmap.put("Saint Kitts And Nevis","KN");
    namesmap.put("Saint Lucia","LC");
    namesmap.put("Saint Pierre and Miquelon","PM");
    namesmap.put("Saint Vincent and the Grenadines","VC");
    namesmap.put("Samoa","WS");
    namesmap.put("San Marino","SM");
    namesmap.put("Sao Tome and Principe","ST");
    namesmap.put("Saudi Arabia","SA");
    namesmap.put("Senegal","SN");
    namesmap.put("Seychelles","SC");
    namesmap.put("Sierra Leone","SL");
    namesmap.put("Singapore","SG");
    namesmap.put("Slovakia","SK");
    namesmap.put("Slovenia","SI");
    namesmap.put("Solomon Islands","SB");
    namesmap.put("Somalia","SO");
    namesmap.put("South Africa","ZA");
    namesmap.put("South Georgia and the South Sandwich Islands","GS");
    namesmap.put("Spain","ES");
    namesmap.put("Sri Lanka","LK");
    namesmap.put("Sudan","SD");
    namesmap.put("Suriname","SR");
    namesmap.put("Svalbard and Jan Mayen","SJ");
    namesmap.put("Swaziland","SZ");
    namesmap.put("Sweden","SE");
    namesmap.put("Switzerland","CH");
    namesmap.put("Syrian Arab Republic","SY");
    namesmap.put("Taiwan","TW");
    namesmap.put("Tajikistan","TJ");
    namesmap.put("Tanzania","TZ");
    namesmap.put("Thailand","TH");
    namesmap.put("Togo","TG");
    namesmap.put("Tokelau","TK");
    namesmap.put("Tonga","TO");
    namesmap.put("Trinidad and Tobago","TT");
    namesmap.put("Tunisia","TN");
    namesmap.put("Turkey","TR");
    namesmap.put("Turkmenistan","TM");
    namesmap.put("Turks and Caicos Islands","TC");
    namesmap.put("Tuvalu","TV");
    namesmap.put("Uganda","UG");
    namesmap.put("Ukraine","UA");
    namesmap.put("United Arab Emirates","AE");
    namesmap.put("United Kingdom","GB");
    namesmap.put("United States","US");
    namesmap.put("United States Minor Outlying Islands","UM");
    namesmap.put("Uruguay","UY");
    namesmap.put("Uzbekistan","UZ");
    namesmap.put("Vanuatu","VU");
    namesmap.put("Vatican City","VA");
    namesmap.put("Venezuela","VE");
    namesmap.put("Vietnam","VN");
    namesmap.put("Virgin Islands, British","VG");
    namesmap.put("Virgin Islands, U.S.","VI");
    namesmap.put("Wallis and Futuna","WF");
    namesmap.put("Western Sahara","EH");
    namesmap.put("Yemen","YE");
    namesmap.put("Yugoslavia","YU");
    namesmap.put("Zambia","ZM");
    namesmap.put("Zimbabwe","ZW");
}







    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox agreeCheckbox;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel cityLabel;
    private javax.swing.JTextField cityTextfield;
    private javax.swing.JButton continueButton;
    private javax.swing.JComboBox countryCombobox;
    private javax.swing.JLabel countryLabel;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JTextField emailTextfield;
    private javax.swing.JLabel firstnameLabel;
    private javax.swing.JTextField firstnameTextfield;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lastnameLabel;
    private javax.swing.JTextField lastnameTextfield;
    private javax.swing.JPanel licenseHeaderPanel;
    private javax.swing.JPanel licenseMainPanel;
    private javax.swing.JPanel licensePanel;
    private javax.swing.JEditorPane licenseTextpane;
    private javax.swing.JPanel mainpanel;
    private javax.swing.JCheckBox notifyUpdatesCheckbox;
    private javax.swing.JLabel organizationLabel;
    private javax.swing.JTextField organizationTextfield;
    private javax.swing.JProgressBar progressbar;
    private javax.swing.JPanel registrationFormPanel;
    private javax.swing.JPanel registrationHeaderPanel;
    private javax.swing.JPanel registrationPanel;
    private javax.swing.JComboBox stateCombobox;
    private javax.swing.JLabel stateLabel;
    private javax.swing.JLabel toplabel1;
    private javax.swing.JLabel toplabel2;
    private javax.swing.JLabel toplabel3;
    private javax.swing.JLabel toplabel4;
    // End of variables declaration//GEN-END:variables

}
