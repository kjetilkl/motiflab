/*
 * UCSCtrackDialog.java
 *
 * Created on 5. november 2009, 10:29
 */

package motiflab.gui;

import java.io.FileNotFoundException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import motiflab.engine.MotifLabEngine;
import org.jdesktop.application.Action;
import motiflab.engine.data.Organism;
import motiflab.engine.data.RegionDataset;
import motiflab.engine.data.NumericDataset;
import motiflab.engine.datasource.DataTrack;
import motiflab.engine.datasource.DataSource;
import motiflab.engine.datasource.DataSource_http_GET;


/**
 *
 * @author  kjetikl
 */
public class UCSCtrackDialog extends javax.swing.JDialog {
     
    private static final String defaultServer="genome.ucsc.edu";
    private String oldserver=null;
    private String oldclade=null; // this holds the value which is shown in the menu ("display name") and not the "internal name"
    private String oldorganism=null; // this holds the value which is shown in the menu ("display name") and not the "internal name"
    private String oldbuild=null; // this holds the value which is shown in the menu ("display name"), but it should be the same as the "internal name"
    private String oldgroup=null;
    private String oldtrack=null;
    private String oldtable=null;
    private boolean OKpressed=false;
    private boolean everythingOK=true;
    private static HashMap<String,String[][]> currentConfiguration=null; // this is static to enable the 'next session' to start at same point as last time
    private SimpleDataPanelIcon regionIcon;
    private SimpleDataPanelIcon numericIcon;
    private SimpleDataPanelIcon unknownIcon;
    private DataTrack parentDataTrack=null;
    private MotifLabGUI gui=null;
    
    private ImageIcon redbullet=null;
    private ImageIcon greenbullet=null;
    private ImageIcon blackbullet=null;    
    
    /** Creates new UCSCtrackDialog 
     * @parent A parent frame
     * @datatrack A parent datatrack (optional). If this is set then the the trackname will not be editable but be based on this track. Also if the selected source is incompatible with the track, a warning message will be displayed
     */
    public UCSCtrackDialog(MotifLabGUI gui, DataTrack datatrack) {
        super(gui.getFrame(), true);
        this.gui=gui;
        redbullet=new ImageIcon(getClass().getResource("resources/icons/redbullet.png")); 
        greenbullet=new ImageIcon(getClass().getResource("resources/icons/greenbullet.png"));
        blackbullet=new ImageIcon(getClass().getResource("resources/icons/blackbullet.png"));        
        parentDataTrack=datatrack;
        numericIcon=new SimpleDataPanelIcon(20, 20, SimpleDataPanelIcon.NUMERIC_TRACK_GRAPH_ICON,null);
        numericIcon.setForegroundColor(java.awt.Color.BLUE);
        numericIcon.setBackgroundColor(null);
        regionIcon=new SimpleDataPanelIcon(20, 20, SimpleDataPanelIcon.REGION_ICON,null);
        regionIcon.setForegroundColor(java.awt.Color.GREEN);
        regionIcon.setBackgroundColor(null);
        unknownIcon=new SimpleDataPanelIcon(20, 20, SimpleDataPanelIcon.UNKNOWN_ICON,null);
        unknownIcon.setForegroundColor(java.awt.Color.BLACK);
        initComponents();       
        if (parentDataTrack==null) setTitle("Select Track from UCSC Genome Browser");
        else setTitle("Add source for "+parentDataTrack.getName()+" from UCSC Genome Browser");
        
        if (currentConfiguration==null) {
            serverCombobox.setSelectedIndex(0); // select default UCSC server just to get things going
        }
        else {
            updateMenusWithNewData("all"); // initialize menus with settings from "previous session"
        }

        if (parentDataTrack!=null) {
            nameTextField.setText(parentDataTrack.getName());
            nameTextField.setEditable(false);
        }
    }

    private String getBaseURL(String server) {
        if (!server.startsWith("http://")) server="http://"+server;
        return server+"/cgi-bin/hgTables";
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        progressbar = new javax.swing.JProgressBar();
        jPanel6 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        mainPanel = new javax.swing.JPanel();
        gridPanel = new javax.swing.JPanel();
        organismLabel = new javax.swing.JLabel();
        organismCombobox = new javax.swing.JComboBox();
        buildLabel = new javax.swing.JLabel();
        buildCombobox = new javax.swing.JComboBox();
        supportedBuildIcon = new javax.swing.JLabel();
        groupLabel = new javax.swing.JLabel();
        groupCombobox = new javax.swing.JComboBox();
        trackLabel = new javax.swing.JLabel();
        trackCombobox = new javax.swing.JComboBox();
        tableLabel = new javax.swing.JLabel();
        tableCombobox = new javax.swing.JComboBox();
        nameLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        typeLabel = new javax.swing.JLabel();
        typeIconLabel = new javax.swing.JLabel();
        cladeLabel = new javax.swing.JLabel();
        cladeCombobox = new javax.swing.JComboBox();
        messagePanel = new javax.swing.JPanel();
        messageLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        serverCombobox = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N
        setResizable(false);

        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(100, 42));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel4.setName("jPanel4"); // NOI18N
        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(motiflab.gui.MotifLabApp.class).getContext().getActionMap(UCSCtrackDialog.class, this);
        okButton.setAction(actionMap.get("OKAction")); // NOI18N
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(motiflab.gui.MotifLabApp.class).getContext().getResourceMap(UCSCtrackDialog.class);
        okButton.setText(resourceMap.getString("okButton.text")); // NOI18N
        okButton.setMaximumSize(new java.awt.Dimension(75, 27));
        okButton.setMinimumSize(new java.awt.Dimension(75, 27));
        okButton.setName("okButton"); // NOI18N
        okButton.setOpaque(false);
        okButton.setPreferredSize(new java.awt.Dimension(75, 27));
        jPanel4.add(okButton);

        cancelButton.setAction(actionMap.get("cancelAction")); // NOI18N
        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setMaximumSize(new java.awt.Dimension(75, 27));
        cancelButton.setMinimumSize(new java.awt.Dimension(75, 27));
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.setPreferredSize(new java.awt.Dimension(75, 27));
        jPanel4.add(cancelButton);

        jPanel1.add(jPanel4, java.awt.BorderLayout.EAST);

        jPanel5.setName("jPanel5"); // NOI18N
        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        progressbar.setMinimumSize(new java.awt.Dimension(80, 25));
        progressbar.setName("progressbar"); // NOI18N
        progressbar.setPreferredSize(new java.awt.Dimension(80, 25));
        jPanel5.add(progressbar);

        jPanel1.add(jPanel5, java.awt.BorderLayout.WEST);

        jPanel6.setName("jPanel6"); // NOI18N
        jPanel6.setLayout(new java.awt.BorderLayout());
        jPanel1.add(jPanel6, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setLayout(new java.awt.BorderLayout());

        mainPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(0, 6, 4, 6), javax.swing.BorderFactory.createEtchedBorder()));
        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        gridPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 30, 10, 20));
        gridPanel.setName("gridPanel"); // NOI18N
        gridPanel.setLayout(new java.awt.GridBagLayout());

        organismLabel.setText(resourceMap.getString("organismLabel.text")); // NOI18N
        organismLabel.setName("organismLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 8, 10);
        gridPanel.add(organismLabel, gridBagConstraints);

        organismCombobox.setName("organismCombobox"); // NOI18N
        organismCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                organismSelectedAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridPanel.add(organismCombobox, gridBagConstraints);

        buildLabel.setText(resourceMap.getString("buildLabel.text")); // NOI18N
        buildLabel.setName("buildLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 8, 26);
        gridPanel.add(buildLabel, gridBagConstraints);

        buildCombobox.setName("buildCombobox"); // NOI18N
        buildCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildSelectedAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridPanel.add(buildCombobox, gridBagConstraints);

        supportedBuildIcon.setIcon(resourceMap.getIcon("supportedBuildIcon.icon")); // NOI18N
        supportedBuildIcon.setText(resourceMap.getString("supportedBuildIcon.text")); // NOI18N
        supportedBuildIcon.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 4, 0, 0));
        supportedBuildIcon.setName("supportedBuildIcon"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridPanel.add(supportedBuildIcon, gridBagConstraints);

        groupLabel.setText(resourceMap.getString("groupLabel.text")); // NOI18N
        groupLabel.setName("groupLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 8, 10);
        gridPanel.add(groupLabel, gridBagConstraints);

        groupCombobox.setName("groupCombobox"); // NOI18N
        groupCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groupSelectedAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridPanel.add(groupCombobox, gridBagConstraints);

        trackLabel.setText(resourceMap.getString("trackLabel.text")); // NOI18N
        trackLabel.setName("trackLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 8, 10);
        gridPanel.add(trackLabel, gridBagConstraints);

        trackCombobox.setName("trackCombobox"); // NOI18N
        trackCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trackSelectedAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridPanel.add(trackCombobox, gridBagConstraints);

        tableLabel.setText(resourceMap.getString("tableLabel.text")); // NOI18N
        tableLabel.setName("tableLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 8, 10);
        gridPanel.add(tableLabel, gridBagConstraints);

        tableCombobox.setName("tableCombobox"); // NOI18N
        tableCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableSelectionAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridPanel.add(tableCombobox, gridBagConstraints);

        nameLabel.setText(resourceMap.getString("nameLabel.text")); // NOI18N
        nameLabel.setName("nameLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 8, 10);
        gridPanel.add(nameLabel, gridBagConstraints);

        nameTextField.setColumns(30);
        nameTextField.setText(resourceMap.getString("nameTextField.text")); // NOI18N
        nameTextField.setName("nameTextField"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridPanel.add(nameTextField, gridBagConstraints);

        typeLabel.setText(resourceMap.getString("typeLabel.text")); // NOI18N
        typeLabel.setName("typeLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 8, 10);
        gridPanel.add(typeLabel, gridBagConstraints);

        typeIconLabel.setText(resourceMap.getString("typeIconLabel.text")); // NOI18N
        typeIconLabel.setName("typeIconLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridPanel.add(typeIconLabel, gridBagConstraints);

        cladeLabel.setText(resourceMap.getString("cladeLabel.text")); // NOI18N
        cladeLabel.setName("cladeLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 8, 10);
        gridPanel.add(cladeLabel, gridBagConstraints);

        cladeCombobox.setName("cladeCombobox"); // NOI18N
        cladeCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cladeSelectedAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridPanel.add(cladeCombobox, gridBagConstraints);

        mainPanel.add(gridPanel);

        jPanel3.add(mainPanel, java.awt.BorderLayout.CENTER);

        messagePanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 10, 0, 0));
        messagePanel.setMinimumSize(new java.awt.Dimension(16, 30));
        messagePanel.setName("messagePanel"); // NOI18N
        messagePanel.setPreferredSize(new java.awt.Dimension(100, 30));
        messagePanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        messageLabel.setFont(resourceMap.getFont("messageLabel.font")); // NOI18N
        messageLabel.setForeground(resourceMap.getColor("messageLabel.foreground")); // NOI18N
        messageLabel.setText(resourceMap.getString("messageLabel.text")); // NOI18N
        messageLabel.setName("messageLabel"); // NOI18N
        messagePanel.add(messageLabel);

        jPanel3.add(messagePanel, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setPreferredSize(new java.awt.Dimension(100, 36));
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        jPanel2.add(jLabel1);

        serverCombobox.setEditable(true);
        serverCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "genome.ucsc.edu", "www.epigenomebrowser.org", "genomebrowser.wustl.edu" }));
        serverCombobox.setName("serverCombobox"); // NOI18N
        serverCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverSelectAction(evt);
            }
        });
        jPanel2.add(serverCombobox);

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void tableSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableSelectionAction
    String newtable=(String)tableCombobox.getSelectedItem();
    if (oldtable==null || !oldtable.equals(newtable)) {
        updateMenus("table");
    }
}//GEN-LAST:event_tableSelectionAction

private void organismSelectedAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_organismSelectedAction
    String neworganism=(String)organismCombobox.getSelectedItem();
    if (oldorganism==null || !oldorganism.equals(neworganism)) { 

        updateMenus("organism");
    }
}//GEN-LAST:event_organismSelectedAction

private void buildSelectedAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildSelectedAction
    String newbuild=(String)buildCombobox.getSelectedItem();
    if (oldbuild==null || !oldbuild.equals(newbuild)) {
       updateMenus("build");
    }
}//GEN-LAST:event_buildSelectedAction

private void groupSelectedAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_groupSelectedAction
    String newgroup=(String)groupCombobox.getSelectedItem();
    if (oldgroup==null || !oldgroup.equals(newgroup)) {
       updateMenus("group");
    }
}//GEN-LAST:event_groupSelectedAction

private void trackSelectedAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trackSelectedAction
    String newtrack=(String)trackCombobox.getSelectedItem();
    if (oldtrack==null || !oldtrack.equals(newtrack)) {
       updateMenus("track");
    }

}//GEN-LAST:event_trackSelectedAction

    private void serverSelectAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverSelectAction
        String newserver=(String)serverCombobox.getSelectedItem();
        if (oldserver==null || !oldserver.equals(newserver)) {
           updateMenus("server");
        }
    }//GEN-LAST:event_serverSelectAction

    private void cladeSelectedAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cladeSelectedAction
        String newclade=(String)cladeCombobox.getSelectedItem();
        if (oldclade==null || !oldclade.equals(newclade)) {
           updateMenus("clade");
        }
    }//GEN-LAST:event_cladeSelectedAction


    @SuppressWarnings("unchecked")
    private void updateMenus(final String updatedMenu) {
        //gui.logMessage("updateMenus("+updatedMenu+")");
        final String server=(String)serverCombobox.getSelectedItem();
        String clade=(String)cladeCombobox.getSelectedItem();
        String organism=(String)organismCombobox.getSelectedItem(); // NB: not all of these will be supported!
        String build=(String)buildCombobox.getSelectedItem();
        String group=(String)groupCombobox.getSelectedItem();
        String table=(String)tableCombobox.getSelectedItem();
        String track=(String)trackCombobox.getSelectedItem();
        // int organismID=Organism.getTaxonomyID(organism);
        // String clade=Organism.getCladeForOrganism(organismID);
        clade=getKeyForValue("clade",clade); //
        String argument="";
        boolean newserver=(updatedMenu.equals("server"));
        boolean newclade=(updatedMenu.equals("clade"));
        boolean neworganism=(updatedMenu.equals("organism"));
        if (newserver) clade=null; // reset all when changing server. (Or else we might get errors if the settings are incompatible)
        if (newserver || newclade) organism=null;
        if (newserver || newclade || neworganism) build=null;
        if (clade!=null && !clade.isEmpty() && !clade.equalsIgnoreCase("unknown")) argument+="clade="+clade;        
        if (organism!=null && !organism.isEmpty()) {
            if (!argument.isEmpty()) argument+="&";
            argument+="org="+organism.replace(' ', '+');
        } // to make the URL safe           
        if (build!=null && !build.isEmpty()) {
            if (!argument.isEmpty()) argument+="&";
            argument+="db="+build;
        }  // the 'db' setting will override the 'org' when set (e.g. setting org=Gorilla and db=hg19 will retrieve a page for hg19!)           
        if (group!=null && !group.isEmpty() && (updatedMenu.equals("group") || updatedMenu.equals("track") || updatedMenu.equals("table"))) argument+="&hgta_group="+getKeyForValue("hgta_group",group);
        if (track!=null && !track.isEmpty() && (updatedMenu.equals("track") || updatedMenu.equals("table"))) argument+="&hgta_track="+getKeyForValue("hgta_track",track);
        if (table!=null && !table.isEmpty() && (updatedMenu.equals("table"))) argument+="&hgta_table="+getKeyForValue("hgta_table",table);
        progressbar.setIndeterminate(true);
        serverCombobox.setEnabled(false);
        cladeCombobox.setEnabled(false);
        organismCombobox.setEnabled(false);
        buildCombobox.setEnabled(false);
        groupCombobox.setEnabled(false);
        tableCombobox.setEnabled(false);
        trackCombobox.setEnabled(false);
        nameTextField.setEnabled(false);
        supportedBuildIcon.setEnabled(false);
        if (!argument.isEmpty()) argument="?"+argument;
        final String urlstring=getBaseURL(server)+argument;
        //gui.logMessage(urlstring);        
        SwingWorker worker=new SwingWorker<Void, Void>() {
            Exception ex=null;
            @Override 
            public Void doInBackground() {
                //gui.logMessage("doInBackground");
                try {  
                    URL url=new URL(urlstring);
                    String page=MotifLabEngine.getPage(url);        
                    HashMap<String,String[][]> map=parsePage(page);
                    currentConfiguration=map;
                    currentConfiguration.put("server", new String[][]{{server}});
                } catch (Exception e) {
                    // gui.logMessage("UCSC server error: "+e.toString());
                    ex=e;
                } 
                //gui.logMessage("doInBackground:end");
                return null;
            }
            @Override
            public void done() { // this method is invoked on the EDT!
                //gui.logMessage("done");
                progressbar.setIndeterminate(false);
                serverCombobox.setEnabled(true);
                cladeCombobox.setEnabled(true);
                organismCombobox.setEnabled(true);
                buildCombobox.setEnabled(true);
                groupCombobox.setEnabled(true);
                tableCombobox.setEnabled(true);
                trackCombobox.setEnabled(true);
                nameTextField.setEnabled(true);
                supportedBuildIcon.setEnabled(true);
                if (ex!=null) {
                     String message;
                     if (ex instanceof FileNotFoundException) message="Server '"+server+"' is not UCSC Genome Browser compatible?";
                     else message=ex.getClass().getSimpleName()+" : "+ex.getMessage();
                     messageLabel.setText(message);
                     messageLabel.setToolTipText(message);
                     everythingOK=false;
                     okButton.setEnabled(false);
                } else {
                    updateMenusWithNewData(updatedMenu);
                }
                //gui.logMessage("done:end");

            }
        }; // end of SwingWorker class
        worker.execute();        
    }

    /**
     * This method is called to update the menus (contents and selections) based on
     * the "currentConfiguration" data structure that contains data which was either 
     * recently obtained from the UCSC web server or just lingering from 
     * a "previous session" configuration
     * @param updatedMenu 
     */
    private void updateMenusWithNewData(String updatedMenu) {
        //gui.logMessage("updateMenusWithNewData("+updatedMenu+")");
        oldclade=getCurrentSelectionInMenu("clade"); // retrieves the selected value from the "current configuration" returned by the web server            
        oldorganism=getCurrentSelectionInMenu("org");                       
        oldorganism=getKeyForValue("org", oldorganism); // convert to internal organism name (although it is mostly the same)
        oldbuild=getCurrentSelectionInMenu("db");
        oldbuild=getKeyForValue("db", oldbuild); // convert to internal build name   
        //gui.logMessage("Current settings : "+oldclade+"/"+oldorganism+"/"+oldbuild);            
        boolean allOK=true;       
        if (updatedMenu.equals("all") || updatedMenu.equals("server") || updatedMenu.equals("clade") ) {  
            cladeCombobox.setModel(getMenuModel("clade",false));
            if (oldclade!=null) cladeCombobox.setSelectedItem(oldclade); 
            String[] organisms=getOrganismsFromConfiguration();
            if (organisms!=null) {
                organismCombobox.setModel(new DefaultComboBoxModel(organisms));  
                if (oldorganism!=null) organismCombobox.setSelectedItem(oldorganism);
            }            
            String[] builds=getBuildsFromConfiguration();
            if (builds!=null) {
                buildCombobox.setModel(new DefaultComboBoxModel(builds));  
                if (oldbuild!=null && contains(builds,oldbuild)) buildCombobox.setSelectedItem(oldbuild);
            }
            allOK=(organisms!=null && organisms.length>0 && builds!=null && builds.length>0);
            groupCombobox.setModel(getMenuModel("group",!allOK));
            trackCombobox.setModel(getMenuModel("track",!allOK));
            tableCombobox.setModel(getMenuModel("table",!allOK));            
        } else if (updatedMenu.equals("organism")) { // this also updates build in the above menu
            String[] builds=getBuildsFromConfiguration();
            if (builds!=null) {
                buildCombobox.setModel(new DefaultComboBoxModel(builds));  
                if (oldbuild!=null && contains(builds,oldbuild)) buildCombobox.setSelectedItem(oldbuild);
            }
            allOK=(builds!=null && builds.length>0);
            groupCombobox.setModel(getMenuModel("group",!allOK));
            trackCombobox.setModel(getMenuModel("track",!allOK));
            tableCombobox.setModel(getMenuModel("table",!allOK));
        } else if (updatedMenu.equals("build")) {
            String[] builds=getBuildsFromConfiguration();
            allOK=(builds!=null && builds.length>0);
            groupCombobox.setModel(getMenuModel("group",!allOK));
            trackCombobox.setModel(getMenuModel("track",!allOK));
            tableCombobox.setModel(getMenuModel("table",!allOK));
        } else if (updatedMenu.equals("group")) {
            String[] builds=getBuildsFromConfiguration();
            allOK=(builds!=null && builds.length>0);
            trackCombobox.setModel(getMenuModel("track",!allOK));
            tableCombobox.setModel(getMenuModel("table",!allOK));            
        } else if (updatedMenu.equals("track")) {
            String[] builds=getBuildsFromConfiguration();
            allOK=(builds!=null && builds.length>0);
            tableCombobox.setModel(getMenuModel("table",!allOK));            
        } else if (updatedMenu.equals("table")) {
            String[] builds=getBuildsFromConfiguration();
            allOK=(builds!=null && builds.length>0);         
        } 
        //gui.logMessage("All OK = "+allOK);
        oldserver=getCurrentServer();
        serverCombobox.setSelectedItem(oldserver);        
        oldgroup=getCurrentSelectionInMenu("hgta_group");
        oldtrack=getCurrentSelectionInMenu("hgta_track");
        oldtable=getCurrentSelectionInMenu("hgta_table");      
        if (allOK) groupCombobox.setSelectedItem(oldgroup);
        if (allOK) trackCombobox.setSelectedItem(oldtrack);
        if (allOK) tableCombobox.setSelectedItem(oldtable);
        if (nameTextField.isEditable()) {
            if (allOK) {
                String trackname=getKeyForValue("hgta_table", oldtable);
                trackname=trackname.replaceAll("[^\\w\\-]", "_"); // replace illegal characters with underscores
                trackname=trackname.replaceAll("__+", "_"); // collapse runs of underscores
                trackname=trackname.replaceAll("^_", ""); // remove leading underscore
                trackname=trackname.replaceAll("_$", ""); // remove trailing underscore                    
                nameTextField.setText(trackname);
                nameTextField.setCaretPosition(0);
            } else nameTextField.setText("");
        }

        Class type=getCurrentTrackType();
        if (type==null) {
            messageLabel.setText("Unable to parse data from this track");
            messageLabel.setToolTipText("Unable to parse data from this track");
            everythingOK=false;
            typeIconLabel.setIcon(unknownIcon);
            typeIconLabel.setText("Unknown");
            allOK=false;
        } else {
            everythingOK=true; // so far
            if (type==NumericDataset.class) {
                typeIconLabel.setIcon(numericIcon);
                typeIconLabel.setText("Numeric");                
            } else if (type==RegionDataset.class) {
                typeIconLabel.setIcon(regionIcon);
                typeIconLabel.setText("Region");                
            } 
        }
        String selectedBuild=(String)buildCombobox.getSelectedItem(); // build currently selected in box
        boolean buildIsSupported=Organism.isGenomeBuildSupported(selectedBuild);
        supportedBuildIcon.setIcon((buildIsSupported)?greenbullet:redbullet);
        String tooltip="Genome build '"+selectedBuild+"' is "+((buildIsSupported)?"":"currently not ")+"recognized by MotifLab.";
        if (!buildIsSupported) tooltip="<html>"+tooltip+"<br>You can add new organisms and genome builds via the <tt><b>Configure</b></tt> menu.<br></html>";
        supportedBuildIcon.setToolTipText(tooltip);
        boolean buildfail=(oldbuild!=null && !oldbuild.equals(selectedBuild));
        if (isConfigurationEmpty()) { // server did not return valid stuff
            String message="ERROR: Server did not return valid results.";
            messageLabel.setText(message);
            messageLabel.setToolTipText(message);
            everythingOK=false;
            allOK=false;
        } else if (buildfail) { // server did not return results for the currently selected build!
            String message="";
            if (selectedBuild==null || selectedBuild.isEmpty()) message="ERROR: No build selected";
            else if (oldbuild.isEmpty()) message="ERROR: Server did not return any tracks for '"+selectedBuild+"'";
            else message="ERROR: Server returned tracks for build '"+oldbuild+"' not '"+selectedBuild+"'";
            messageLabel.setText(message);
            messageLabel.setToolTipText(message);
            everythingOK=false;
            oldbuild=null; // this makes it possible to reselect all builds
        } 
        if (everythingOK) {
            messageLabel.setText("  ");
            messageLabel.setToolTipText(null);            
        }       
        okButton.setEnabled(allOK && buildIsSupported && !buildfail);        
        pack();
        invalidate();
        repaint();
    }

    @Action
    public void OKAction() {
        if (parentDataTrack!=null) {
            Class type=getCurrentTrackType(); 
            if (type==null || !type.equals(parentDataTrack.getDataType())) {
                reportError("The selected source is not compatible with the current datatrack");                               
                return;
            }
        }    
        String trackname=nameTextField.getText().trim();
        if (!trackname.matches("[\\w\\-]+")) {
            reportError("Track name contains illegal characters (only letters, numbers, underscores and hyphens allowed)");
            return;
        }    
        OKpressed=true;
        setVisible(false);
    }
    
    @Action
    public void cancelAction() {
        OKpressed=false;
        setVisible(false);
    }

    public boolean isOKPressed() {
        return OKpressed && everythingOK;
    }
    
    private void reportError(String message) {
       JOptionPane.showMessageDialog(this, message, "Error" ,JOptionPane.ERROR_MESSAGE);                                     
    }
    
    /** 
     * This method is used to retrieve a new DataTrack object based on the selections made in the dialog
     * the returned DataTrack object contains all necessary information to register a new track
     * @return DataTrack
     */
    public DataTrack getDataTrack() {
        if (!everythingOK) return null;
        Class type=getCurrentTrackType();
        if (type==null) return null;
        String dataformat;
        String outputType;
        if (type==NumericDataset.class) {
            dataformat="WIG";
            outputType="wigData";
        } else if (type==RegionDataset.class) {
            dataformat="GTF";
            outputType="gff";
        } else return null;
        String server=(String)serverCombobox.getSelectedItem();
        String clade=(String)cladeCombobox.getSelectedItem();
        String organism=(String)organismCombobox.getSelectedItem();
        String build=(String)buildCombobox.getSelectedItem();
        String group=(String)groupCombobox.getSelectedItem();
        String table=(String)tableCombobox.getSelectedItem();
        String track=(String)trackCombobox.getSelectedItem();
        String trackname=nameTextField.getText().trim();               
        clade=getKeyForValue("clade",clade);
        int organismID=Organism.getOrganismForGenomeBuild(build); // the organism name used in the track URL can be different from the ones registered in MotifLab, so we use the build name to retrieve the taxonomy ID for the organism
        organism=organism.replace(' ', '+'); // make the URL safe
        String argument="clade="+clade+"&org="+organism+"&db="+build;
        argument+="&hgta_group="+getKeyForValue("hgta_group",group);
        argument+="&hgta_track="+getKeyForValue("hgta_track",track);
        argument+="&hgta_table="+getKeyForValue("hgta_table",table);
        argument+="&hgta_regionType=range";        
        argument+="&hgta_outputType="+outputType;
        argument+="&hgta_doTopSubmit=1";                
        argument+="&position=chr$CHROMOSOME:$START-$END";                
        DataTrack datatrack=new DataTrack(trackname, type, "UCSC Genome Browser", table);
        String baseURL=getBaseURL(server);
        DataSource source=new DataSource_http_GET(datatrack, organismID, build, baseURL, dataformat, argument);
        datatrack.addDataSource(source);
        return datatrack;
    }

    /** 
     * This method is used to retrieve a new DataSource object based on the selections made in the dialog
     * The source should be added to a preexisting datatrack (it is not automatically added to the argument track)
     * @param datatrack The parent datatrack for this source
     * @return DataSource
     */
    public DataSource getDataSource(DataTrack datatrack) {
        if (!everythingOK) return null;
        Class type=getCurrentTrackType();
        if (type==null) return null;
        String dataformat;
        String outputType;
        if (type==NumericDataset.class) {
            dataformat="WIG";
            outputType="wigData";
        } else if (type==RegionDataset.class) {
            dataformat="GTF";
            outputType="gff";
        } else return null;
        String server=(String)serverCombobox.getSelectedItem();
        String clade=(String)cladeCombobox.getSelectedItem();        
        String organism=(String)organismCombobox.getSelectedItem();
        String build=(String)buildCombobox.getSelectedItem();
        String group=(String)groupCombobox.getSelectedItem();
        String table=(String)tableCombobox.getSelectedItem();
        String track=(String)trackCombobox.getSelectedItem();
        clade=getKeyForValue("clade",clade);
        int organismID=Organism.getOrganismForGenomeBuild(build); // the organism name used in the track URL can be different from the ones registered in MotifLab, so we use the build name to retrieve the taxonomy ID for the organism
        organism=organism.replace(' ', '+'); // make the URL safe        
        String argument="clade="+clade+"&org="+organism+"&db="+build;
        argument+="&hgta_group="+getKeyForValue("hgta_group",group);
        argument+="&hgta_track="+getKeyForValue("hgta_track",track);
        argument+="&hgta_table="+getKeyForValue("hgta_table",table);
        argument+="&hgta_regionType=range";        
        argument+="&hgta_outputType="+outputType;
        argument+="&hgta_doTopSubmit=1";                
        argument+="&position=chr$CHROMOSOME:$START-$END";
        String baseURL=getBaseURL(server);
        DataSource source=new DataSource_http_GET(datatrack, organismID, build, baseURL, dataformat, argument);
        return source;
    }    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox buildCombobox;
    private javax.swing.JLabel buildLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox cladeCombobox;
    private javax.swing.JLabel cladeLabel;
    private javax.swing.JPanel gridPanel;
    private javax.swing.JComboBox groupCombobox;
    private javax.swing.JLabel groupLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JPanel messagePanel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton okButton;
    private javax.swing.JComboBox organismCombobox;
    private javax.swing.JLabel organismLabel;
    private javax.swing.JProgressBar progressbar;
    private javax.swing.JComboBox serverCombobox;
    private javax.swing.JLabel supportedBuildIcon;
    private javax.swing.JComboBox tableCombobox;
    private javax.swing.JLabel tableLabel;
    private javax.swing.JComboBox trackCombobox;
    private javax.swing.JLabel trackLabel;
    private javax.swing.JLabel typeIconLabel;
    private javax.swing.JLabel typeLabel;
    // End of variables declaration//GEN-END:variables


    
    /**
     * Parses a page and returns a HashMap where the keys are names of drop-down menus on the UCSC Tables web page
     * such as "clade","org","db","hgta_group","hgta_track","hgta_table","hgta_outputType"
     * and the value is another structure with key-value options for that menu.
     */
    private HashMap<String,String[][]> parsePage(String page) {
        //gui.logMessage("*** Parsing new results from server ***");
        HashMap<String, String[][]> map=new HashMap<String,String[][]>();
        String[] sections=page.split("<SELECT NAME="); 
        if (sections.length<=1) return map; // there should be more than one !!
        for (int i=1;i<sections.length;i++) { // start at i=1 because the first section contains no SELECT
            String section=sections[i].substring(0,sections[i].indexOf("</SELECT"));
            int pos=section.indexOf(" ");
            int pos2=section.indexOf(">");
            if (pos<0) pos=pos2;
            else if (pos2>0 && pos2<pos) pos=pos2;            
            String menuname=section.substring(0,pos).trim();
            menuname=stripQuotes(menuname);  
            String options[]=section.split("<OPTION");

            if (options.length<=1) continue; // no options? try the next section
            String[][] keyvalue=new String[options.length-1][3];
            for (int j=1;j<options.length;j++) {
                  String option=options[j];
                  boolean isSelected=false;
                  if (option.indexOf(" SELECTED")>=0) {
                      isSelected=true;
                      option=option.replaceAll(" SELECTED","");   
                  }
                  option=option.replaceFirst(" VALUE=","");
                  if (option.indexOf("</OPTION")>0) option=option.substring(0,option.indexOf("</OPTION"));
                  int splitpos=option.indexOf('>');
                  String key=stripQuotes(option.substring(0,splitpos));
                  String value=option.substring(splitpos+1).trim();
                  keyvalue[j-1][0]=key;                
                  keyvalue[j-1][1]=value;     
                  keyvalue[j-1][2]=(isSelected)?"selected":null;
            }            
            map.put(menuname, keyvalue);
        }            
        return map;
    }
    
    
    
    private String stripQuotes(String string) {
        if (string!=null && string.startsWith("\"") && string.endsWith("\"")) return string.substring(1,string.length()-1);
        if (string!=null && string.startsWith("\'") && string.endsWith("\'")) return string.substring(1,string.length()-1);
        return string;
    }
    
    private DefaultComboBoxModel getMenuModel(String menu, boolean returnEmpty) {
        if (returnEmpty || currentConfiguration==null) return new DefaultComboBoxModel(new String[]{""});
        if (!menu.equals("clade")) menu="hgta_"+menu;
        String[][] options=currentConfiguration.get(menu);
        if (options==null) return new DefaultComboBoxModel(new String[]{""});
        String[] names=new String[options.length];
        for (int i=0;i<options.length;i++) names[i]=options[i][1];
        return new DefaultComboBoxModel(names);
    }
       
    private Class getCurrentTrackType() {
        if (currentConfiguration==null) return null;
        String[][] options=currentConfiguration.get("hgta_outputType");
        if (options==null) return null;
        for (int i=0;i<options.length;i++) {
                 if (options[i][0].equals("wigData")) return NumericDataset.class;
            else if (options[i][0].equals("gff")) return RegionDataset.class;   
        }
        return null;
    }
       
    private String getCurrentServer() {
        if (currentConfiguration==null) return defaultServer;
        String[][] serverMap=currentConfiguration.get("server");
        String server=(serverMap!=null)?serverMap[0][0]:null;
        return (server!=null)?server:defaultServer;
    }
    
    /** Finds the currently selected item in currentConfiguration for the specified menu
     *  It returns the 'display name' (as seen in the menu) aka 'value' and not the
     *  internal 'key' name.
     */
    private String getCurrentSelectionInMenu(String menu) {
        if (currentConfiguration==null) return null;
        String[][] options=currentConfiguration.get(menu);
        if (options==null) return null;
        for (int i=0;i<options.length;i++) {
            if (options[i][2]!=null) return options[i][1]; // this is the 'display name' (aka 'value') not the internal 'key' name
        }
        return null;   
    }
    
    
    private String getKeyForValue(String menu, String value) {
        if (currentConfiguration==null) return "";
        String[][] options=currentConfiguration.get(menu);
        if (options==null) return "";
        for (int i=0;i<options.length;i++) {
            if (options[i][1].equals(value)) return options[i][0];
        }
        return "";                  
    }
    
    /**
     * This will return a list of "internal names" (keys) not display names (values) from the current configuration that was returned by the server
     * @return 
     */
    private String[] getOrganismsFromConfiguration() {
        if (currentConfiguration==null) return new String[0];       
        ArrayList<String> common=new ArrayList<String>();
        String[][] organisms=currentConfiguration.get("org");
        if (organisms==null) return new String[0];
        for (int i=0;i<organisms.length;i++) {
            common.add(organisms[i][0]);          
        }
        String[] result=new String[common.size()];
        return common.toArray(result);      
    }  
    
    /**
     * This will return a list of "internal names" (keys) not display names (values) from the current configuration that was returned by the server
     * @return 
     */    
    private String[] getBuildsFromConfiguration() {
        if (currentConfiguration==null) return new String[0];      
        ArrayList<String> common=new ArrayList<String>();
        String[][] builds=currentConfiguration.get("db");
        if (builds==null) return new String[0];
        for (int i=0;i<builds.length;i++) {
            common.add(builds[i][0]); // use "key" not "value"
            // if (Organism.isGenomeBuildSupported(builds[i][0])) common.add(builds[i][0]);
        }
        String[] result=new String[common.size()];
        return common.toArray(result);
    }
    
    private boolean isConfigurationEmpty() {
        if (currentConfiguration==null) return true;
        String[][] builds=currentConfiguration.get("db");
        return (builds==null);
    }
    
    
    private boolean contains(String[] array, String element) {
        if (array==null || element==null || array.length==0) return false;
        for (String e:array) {
            if (e.equals(element)) return true;
        }
        return false;
    }
    
    private void debug(boolean compact) {
        System.err.println("\n\n");
        if (currentConfiguration==null) {
            System.err.println("currentConfiguration==null");
            return;
        }
        for (String sections:currentConfiguration.keySet()) {
            String[][] pairs=currentConfiguration.get(sections);
            if (compact) {
                System.err.println("["+sections+"] => "+pairs.length); 
            } else {
                System.err.println("--- "+sections+" ---");                
                for (int i=0;i<pairs.length;i++) {
                    System.err.print("    "+pairs[i][0]+" => "+pairs[i][1]);
                    if (pairs[i][2]!=null) System.err.println("     SELECTED");
                    System.err.println("");
                }
            }
        }        
    }
    
    private void debug(String section) {
        System.err.println("\n\n");
        if (currentConfiguration==null) {
            System.err.println("currentConfiguration==null");
            return;
        }
        String[][] pairs=currentConfiguration.get(section);
        if (pairs==null) {
            System.err.println("No such section: "+section+". Only found:");
            for (String string:currentConfiguration.keySet()) {
                System.err.println("    "+string);
            }
            return;
        }      
        System.err.println("--- "+section+" ---");        
        for (int i=0;i<pairs.length;i++) {
            System.err.print("    "+pairs[i][0]+" => "+pairs[i][1]);
            if (pairs[i][2]!=null) System.err.println("     SELECTED");
            else System.err.println();
        }
            
    }    
}
