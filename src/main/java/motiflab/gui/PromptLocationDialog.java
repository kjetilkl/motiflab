/*
 * PromptLocationDialog.java
 *
 * Created on 1. september 2009, 10:49
 */

package motiflab.gui;

import java.awt.Cursor;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import javax.swing.ButtonGroup;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.SwingUtilities;
import motiflab.external.ExternalProgram;

/**
 * PromptLocationDialog is used to query the user for the location of an external program
 * The user could either select a preinstalled executable or (if available) select one
 * of possibly several installation sources
 * @author  kjetikl
 */
public class PromptLocationDialog extends javax.swing.JDialog {
    private boolean isOKpressed=false;
    private String location=null;
    private ArrayList<String[]> sources=null;
    private JRadioButton[] sourceRadioButtons;
    private ButtonGroup buttongroup=new ButtonGroup();
    private boolean isDownloading=false;
    private boolean cancelDownload=false;
    private MotifLabGUI gui=null;
    private ExternalProgram program=null;
    
    /** Creates new form PromptLocationDialog */
    public PromptLocationDialog(MotifLabGUI gui, ExternalProgram program) {
        super(gui.getFrame(), true);
        this.gui=gui;
        this.program=program;
        initComponents();        
        sources=program.getExecutableSources();
        if (sources==null || sources.isEmpty()) {
            sourcesPanel.add(new JLabel("No sources available"));
        } else {
            sourceRadioButtons=new JRadioButton[sources.size()];
            for (int i=0;i<sources.size();i++) {
                String[] source=sources.get(i);
                //JPanel panel=new JPanel(new FlowLayout(FlowLayout.LEADING));
                sourceRadioButtons[i]=new JRadioButton(source[0]+"    ("+program.getName()+" version "+source[1]+")");
                sourceRadioButtons[i].setToolTipText(source[2]);
                buttongroup.add(sourceRadioButtons[i]);
                //panel.add(sourceRadioButtons[i]);
                sourcesPanel.add(sourceRadioButtons[i]);
            }
        }
        buttongroup.add(useLocalFileRadioButton);
        useLocalFileRadioButton.setSelected(true);
        introductionPanel.add(new JLabel("<html>The <b>"+program.getName()+"</b> configuration file describes a locally running service.</html>"));
        introductionPanel.add(new JLabel("<html>Please specify the location of the local executable file (if preinstalled)</html>"));
        introductionPanel.add(new JLabel("<html>or select one of the available sources for automatic download of this program.</html>"));
        
        ArrayList<String> requirements=program.getRequirementsBesidesMotifLabVersion();
        if (requirements!=null) { 
            introductionPanel.add(new JLabel("<html>&nbsp;</html>"));
            introductionPanel.add(new JLabel("<html><font color=\"red\"><b>NOTE:</b>&nbsp;&nbsp;This program has specified the following system requirements:</font></httml>"));
            for (String req:requirements) {
                introductionPanel.add(new JLabel("<html><font color=\"red\">&nbsp;&nbsp;&nbsp;&bull;&nbsp;&nbsp;"+req+"</font></html>"));
            }
        }    
        setTitle("Specify program location");
        progressbar.setVisible(false);
        pack();
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        introductionPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        useLocalFileRadioButton = new javax.swing.JRadioButton();
        localFileTextfield = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        sourcesPanel = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        progressbar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 10, 10));
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        introductionPanel.setName("introductionPanel"); // NOI18N
        introductionPanel.setLayout(new javax.swing.BoxLayout(introductionPanel, javax.swing.BoxLayout.Y_AXIS));
        jPanel1.add(introductionPanel);

        getContentPane().add(jPanel1);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(motiflab.gui.MotifLabApp.class).getContext().getResourceMap(PromptLocationDialog.class);
        jPanel2.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10), javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel2.border.insideBorder.title")))); // NOI18N
        jPanel2.setName("jPanel2"); // NOI18N

        useLocalFileRadioButton.setSelected(true);
        useLocalFileRadioButton.setText(resourceMap.getString("useLocalFileRadioButton.text")); // NOI18N
        useLocalFileRadioButton.setName("useLocalFileRadioButton"); // NOI18N

        localFileTextfield.setText(resourceMap.getString("localFileTextfield.text")); // NOI18N
        localFileTextfield.setName("localFileTextfield"); // NOI18N

        browseButton.setText(resourceMap.getString("browseButton.text")); // NOI18N
        browseButton.setName("browseButton"); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(useLocalFileRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(localFileTextfield, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(browseButton)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(browseButton)
                    .addComponent(localFileTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(useLocalFileRadioButton))
                .addContainerGap(53, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10), javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel3.border.insideBorder.title")))); // NOI18N
        jPanel3.setName("jPanel3"); // NOI18N

        sourcesPanel.setName("sourcesPanel"); // NOI18N
        sourcesPanel.setLayout(new javax.swing.BoxLayout(sourcesPanel, javax.swing.BoxLayout.Y_AXIS));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 493, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(sourcesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 103, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(sourcesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(92, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel3);

        jPanel5.setMinimumSize(new java.awt.Dimension(0, 46));
        jPanel5.setName("jPanel5"); // NOI18N
        jPanel5.setPreferredSize(new java.awt.Dimension(100, 46));

        okButton.setText(resourceMap.getString("okButton.text")); // NOI18N
        okButton.setMaximumSize(new java.awt.Dimension(75, 27));
        okButton.setMinimumSize(new java.awt.Dimension(75, 27));
        okButton.setName("okButton"); // NOI18N
        okButton.setPreferredSize(new java.awt.Dimension(75, 27));
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okPressed(evt);
            }
        });

        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setMaximumSize(new java.awt.Dimension(75, 27));
        cancelButton.setMinimumSize(new java.awt.Dimension(75, 27));
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.setPreferredSize(new java.awt.Dimension(75, 27));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelPressed(evt);
            }
        });

        progressbar.setName("progressbar"); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progressbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 187, Short.MAX_VALUE)
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(progressbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        getContentPane().add(jPanel5);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void okPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okPressed
// TODO add your handling code here:
    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    if (useLocalFileRadioButton.isSelected()) {//GEN-LAST:event_okPressed
        isDownloading=false;
        location=localFileTextfield.getText().trim();
    }
    else {
        int index=-1;
        for (int i=0;i<sources.size();i++) {
            if (sourceRadioButtons[i].isSelected()) {
                index=i;                     
                break;
            }            
        }
        String urlStringTemp=sources.get(index)[2];
        final String urlString=(urlStringTemp.startsWith("http"))?urlStringTemp:gui.getEngine().getRepositoryURL()+urlStringTemp; // check if URL is "relative to repository"
        final String compressionFormat=sources.get(index)[3]; // either null or ZIP
        final String relativeLocationInZIP=sources.get(index)[4]; // path of target file within ZIP file or null
        final boolean isZIPformat=(compressionFormat!=null && compressionFormat.equals("ZIP"));
        final String programname=program.getName().replace(' ', '_'); // remove spaces in the name just in case
        int start=urlString.lastIndexOf("/");
        if (start<0) start=0;
        else start+=1;
        if (start>=urlString.length()) {
            JOptionPane.showMessageDialog(rootPane, "No filename found in URL:\n\n"+urlString, "URL Error", JOptionPane.ERROR_MESSAGE); // this is not run on the EDT :-|
            return;
        }
        String executableName=urlString.substring(start);
        location=gui.getEngine().getMotifLabDirectory()+File.separator+"external"+File.separator+programname+File.separator+executableName;
        //System.err.println("Location="+location+"\nExecutablename="+executableName+"\nProgramname="+programname+"\nURL="+urlString);
        final File localfile=new File(location);
        if (!localfile.getParentFile().exists()) { // create necessary parent directories
           if (!(localfile.getParentFile().mkdirs())) {
               JOptionPane.showMessageDialog(rootPane, "Unable to create local directory:\n\n"+localfile.getParent(), "File Error", JOptionPane.ERROR_MESSAGE);
               return;
           }
        }
        Runnable runner=new Runnable() {
                @Override
                public void run() {
                    try {
                        URL url=new URL(urlString);
                        downloadFile(url,localfile,isZIPformat);
                        if (isZIPformat) location=gui.getEngine().getMotifLabDirectory()+File.separator+"external"+File.separator+programname+File.separator+relativeLocationInZIP;
                        SwingUtilities.invokeLater(new Runnable() {
                             @Override public void run() {
                                progressbar.setVisible(false);
                                okButton.setEnabled(true);
                                setVisible(false);         
                             }
                        }); 
                    }
                    catch (Exception e) {
                        String shortname=e.getClass().getSimpleName();
                        JOptionPane.showMessageDialog(rootPane, shortname+"\n\n"+e.getMessage(), "File Error", JOptionPane.ERROR_MESSAGE); // this is not run on the EDT :-|
                        //e.printStackTrace(System.err);
                        isDownloading=false;
                        progressbar.setVisible(false);
                        progressbar.setString(null);
                        progressbar.setIndeterminate(false);
                        okButton.setEnabled(true);
                        //setVisible(false);                         
                        return;
                    }
                }
            };
        progressbar.setVisible(true);
        progressbar.setMinimum(0);
        okButton.setEnabled(false);
        isDownloading=true;
        repaint();
        Thread downloadthread=new Thread(runner);
        downloadthread.start();
        setCursor(Cursor.getDefaultCursor());
    }
    isOKpressed=true;
    if (!isDownloading) setVisible(false);
    
}

private void cancelPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelPressed
    isOKpressed=false;
    if (isDownloading) {cancelDownload=true; return;}    
    setVisible(false);//GEN-LAST:event_cancelPressed
}

private void browseButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonPressed
        useLocalFileRadioButton.setSelected(true);
        final JFileChooser fc = new JFileChooser(gui.getLastUsedDirectory()); // gui.getFileChooser(null);// 
        fc.setDialogTitle("Select program");  
        int returnValue=fc.showOpenDialog(this);
        if (returnValue!=JFileChooser.APPROVE_OPTION) return; // user cancelled
        File file=fc.getSelectedFile();  
        localFileTextfield.setText(file.getAbsolutePath());
        localFileTextfield.setCaretPosition(0);
        gui.setLastUsedDirectory(file.getParentFile());

}//GEN-LAST:event_browseButtonPressed

/** Returns a String specifying the location of the installed executable 
 *  on the local filesystem. Or null if no executable is present
 */
public String getExecutableLocation() {
    if (isOKpressed && location!=null && !location.isEmpty()) return location; 
    else return null;
}


/** 
 * Downloads an executable program from the given URL and "installs" it under the localfile
 * If isZIPfile is set to TRUE, the file will be unzipped after downloading has finished
 * and the source ZIP-file will subsequently be deleted
 */
private void downloadFile(URL url, File localfile, boolean isZIPfile) throws IOException {
    URLConnection connection=url.openConnection();
    // Check if the response is a redirection from HTTP to HTTPS. This must be handled manually    
    int status = ((HttpURLConnection)connection).getResponseCode();
    String redirect = ((HttpURLConnection)connection).getHeaderField("Location");
    if (status>300 && status<400 && redirect!=null && "http".equalsIgnoreCase(url.getProtocol()) && redirect.startsWith("https")) {
            String redirectURL = url.toString().replace("http","https");
            downloadFile(new URL(redirectURL), localfile, isZIPfile);
            return;
    }    
    final int filesize=connection.getContentLength();
    final int[] bytesread=new int[1];
    SwingUtilities.invokeLater(new Runnable() {
            @Override public void run() {
                if (filesize<0) progressbar.setIndeterminate(true);
                else progressbar.setMaximum(filesize);
                progressbar.repaint();
            }
    });   
    BufferedInputStream in = new BufferedInputStream(connection.getInputStream());
    FileOutputStream fos = new FileOutputStream(localfile);
    BufferedOutputStream bout = new BufferedOutputStream(fos,1024);
    byte data[] = new byte[1024];
    int read=0;
    while((read=in.read(data,0,1024))>=0 && !cancelDownload) {
        //if (bytesread[0]%(1024*10)==0) System.err.println("read "+bytesread[0]);
        bytesread[0]+=1024;
        if (filesize>0 && bytesread[0]>filesize) bytesread[0]=filesize;
        SwingUtilities.invokeLater(new Runnable() {
           @Override public void run() {progressbar.setValue(bytesread[0]);progressbar.repaint();}
        });
        bout.write(data,0,read);
        //try {Thread.sleep(100);} catch(Exception e){}
    }
    bout.close();
    in.close();
    if (cancelDownload) {
        localfile.delete();
        cancelDownload=false;
        isOKpressed=false;
    }
    if (localfile.exists()) {
        localfile.setExecutable(true);
        localfile.setWritable(true);
        localfile.setReadable(true);
    }
    isDownloading=false;
    if (isZIPfile) {
        SwingUtilities.invokeLater(new Runnable() {
           @Override public void run() {
               progressbar.setStringPainted(true);
               progressbar.setString("Unpacking...");
               progressbar.repaint();
           }
        });        
        gui.getEngine().unzipFile(localfile,null);
        SwingUtilities.invokeLater(new Runnable() {
           @Override public void run() {
               progressbar.setStringPainted(false);
               progressbar.setString(null);
               progressbar.repaint();
           }
        });          
        if (!localfile.delete()) System.err.println("SYSTEM ERROR: Unable to delete ZIP-file: "+localfile.getAbsolutePath());
    }

}    
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel introductionPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTextField localFileTextfield;
    private javax.swing.JButton okButton;
    private javax.swing.JProgressBar progressbar;
    private javax.swing.JPanel sourcesPanel;
    private javax.swing.JRadioButton useLocalFileRadioButton;
    // End of variables declaration//GEN-END:variables

}
