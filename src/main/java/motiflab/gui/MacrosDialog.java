/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MacrosDialog.java
 *
 * Created on Apr 2, 2014, 4:18:06 PM
 */
package motiflab.gui;

import java.awt.Component;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import motiflab.engine.protocol.ParseError;

/**
 *
 * @author kjetikl
 */
public class MacrosDialog extends javax.swing.JDialog {

    private JTable macrosTable;
    private DefaultTableModel macrosTableModel;
    private MotifLabGUI gui;
    
    /** Creates new form MacrosDialog */
    public MacrosDialog(MotifLabGUI gui) {
        super(gui.getFrame(), true);
        this.gui=gui;
        initComponents();        
        macrosTableModel=new DefaultTableModel(new String[]{"Macro name","Macro definition"},0);
        macrosTable=new JTable(macrosTableModel);        
        macrosTable.setFillsViewportHeight(true);
        macrosTable.getTableHeader().setReorderingAllowed(false);
        macrosTable.setAutoCreateRowSorter(true);
        macrosTable.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE); // this will enable unfinished edits to be commited when table looses focus      
        scrollPane.setViewportView(macrosTable);  
        getRootPane().setDefaultButton(okButton); 
        
        Dimension dim=new Dimension(550,420);      
        this.setPreferredSize(dim);   
        pack();
        this.setResizable(true);        
        
        // populate table with existing macros
        ArrayList<String[]> macros=gui.getEngine().getMacros();
        if (macros!=null) {
            for (int i=0;i<macros.size();i++) {
                String[] macro=macros.get(i);
                macrosTableModel.addRow(new String[]{macro[0],macro[1]});
            }
        }
    }

    /** parses the macros table and updates the macros in the engine */
    private void parseMacros() throws ParseError {
        HashMap<String,String> newmacros=new HashMap<String, String>();
        for (int i=0;i<macrosTableModel.getRowCount();i++) {
            String name=(String)macrosTableModel.getValueAt(i, 0);
            String definition=(String)macrosTableModel.getValueAt(i, 1);           
            if (name==null || name.trim().isEmpty()) continue;
            if (!name.matches("\\w+")) throw new ParseError("Invalid macro name: "+name);
            if (definition.contains(name)) throw new ParseError("Circular macro definition for '"+name+"'");
            newmacros.put(name,definition);
        }
        gui.getEngine().setMacros(newmacros);
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topPanel = new javax.swing.JPanel();
        mainPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        bottomPanel = new javax.swing.JPanel();
        buttonsPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        controlsPanel = new javax.swing.JPanel();
        addMacroButton = new javax.swing.JButton();
        removeMacroButton = new javax.swing.JButton();
        removeAllButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(motiflab.gui.MotifLabApp.class).getContext().getResourceMap(MacrosDialog.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        topPanel.setName("topPanel"); // NOI18N
        topPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        getContentPane().add(topPanel, java.awt.BorderLayout.NORTH);

        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 6, 0, 6));
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new java.awt.BorderLayout());

        scrollPane.setName("scrollPane"); // NOI18N
        jPanel1.add(scrollPane, java.awt.BorderLayout.CENTER);

        mainPanel.add(jPanel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        bottomPanel.setName("bottomPanel"); // NOI18N
        bottomPanel.setPreferredSize(new java.awt.Dimension(400, 40));
        bottomPanel.setLayout(new java.awt.BorderLayout());

        buttonsPanel.setName("buttonsPanel"); // NOI18N
        buttonsPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        okButton.setText(resourceMap.getString("okButton.text")); // NOI18N
        okButton.setName("okButton"); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonPressed(evt);
            }
        });
        buttonsPanel.add(okButton);

        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonPressed(evt);
            }
        });
        buttonsPanel.add(cancelButton);

        bottomPanel.add(buttonsPanel, java.awt.BorderLayout.EAST);

        controlsPanel.setName("controlsPanel"); // NOI18N
        controlsPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        addMacroButton.setText(resourceMap.getString("addMacroButton.text")); // NOI18N
        addMacroButton.setName("addMacroButton"); // NOI18N
        addMacroButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMacroPressed(evt);
            }
        });
        controlsPanel.add(addMacroButton);

        removeMacroButton.setText(resourceMap.getString("removeMacroButton.text")); // NOI18N
        removeMacroButton.setName("removeMacroButton"); // NOI18N
        removeMacroButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeMacrosPressed(evt);
            }
        });
        controlsPanel.add(removeMacroButton);

        removeAllButton.setText(resourceMap.getString("removeAllButton.text")); // NOI18N
        removeAllButton.setName("removeAllButton"); // NOI18N
        removeAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllMacrosButtonPressed(evt);
            }
        });
        controlsPanel.add(removeAllButton);

        bottomPanel.add(controlsPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(bottomPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonPressed
        try {
            parseMacros();
        } catch (ParseError e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Macro error", JOptionPane.ERROR_MESSAGE);
            return;           
        }   
        this.setVisible(false);
    }//GEN-LAST:event_okButtonPressed

    private void cancelButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonPressed
        this.setVisible(false);
    }//GEN-LAST:event_cancelButtonPressed

    private void addMacroPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMacroPressed
        macrosTableModel.addRow(new Object[]{"",""});
        int lastrow=macrosTable.getRowCount()-1;
        macrosTable.editCellAt(lastrow, 0);
        TableCellEditor editor=macrosTable.getCellEditor(lastrow, 0);
        Component comp=editor.getTableCellEditorComponent(macrosTable, "", true, lastrow, 0);
        macrosTable.scrollRectToVisible(comp.getBounds());        
        if (comp instanceof JTextField) ((JTextField)comp).requestFocus();        
    }//GEN-LAST:event_addMacroPressed

    private void removeMacrosPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeMacrosPressed
        int[] selected=macrosTable.getSelectedRows();
        int[] modelselected=new int[selected.length];
        for (int i=0;i<selected.length;i++) modelselected[i]=macrosTable.convertRowIndexToModel(selected[i]);
        DefaultTableModel model=(DefaultTableModel)macrosTable.getModel();
        Arrays.sort(modelselected);
        for (int i=modelselected.length-1;i>=0;i--) { // remove rows from the end to avoid problems with indices changing
            model.removeRow(modelselected[i]);
        }
    }//GEN-LAST:event_removeMacrosPressed

    private void removeAllMacrosButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllMacrosButtonPressed
        macrosTable.selectAll();
        removeMacrosPressed(evt);
    }//GEN-LAST:event_removeAllMacrosButtonPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addMacroButton;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel controlsPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton okButton;
    private javax.swing.JButton removeAllButton;
    private javax.swing.JButton removeMacroButton;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables
}
