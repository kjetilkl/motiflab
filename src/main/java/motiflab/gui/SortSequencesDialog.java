/*
 
 
 */

/*
 * SortSequencesDialog.java
 *
 * Created on 25.aug.2010, 09:31:23
 */

package motiflab.gui;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.DefaultComboBoxModel;
import motiflab.engine.MotifLabClient;
import motiflab.engine.data.DNASequenceDataset;
import motiflab.engine.data.Data;
import motiflab.engine.data.NumericDataset;
import motiflab.engine.data.RegionDataset;
import motiflab.engine.data.SequenceNumericMap;
import motiflab.engine.data.SequencePartition;
import motiflab.engine.util.SequenceSorter;

/**
 *
 * @author kjetikl
 */
public class SortSequencesDialog extends javax.swing.JDialog {

    private MotifLabClient client;
    private DefaultComboBoxModel<String> regionDatasets;
    private DefaultComboBoxModel<String> dnaDatasets;
    private DefaultComboBoxModel<String> numericDatasets;
    private DefaultComboBoxModel<String> numericMaps;
    private DefaultComboBoxModel<String> partitions;
    private DefaultComboBoxModel<String> emptyModel=new DefaultComboBoxModel<String>(new String[]{" "});

    // These are duplicated from SequenceSorter
    public static final String SORT_BY_SEQUENCE_NAME="Sequence name";
    public static final String SORT_BY_SEQUENCE_LENGTH="Sequence length";
    public static final String SORT_BY_REGION_COUNT="Region count";
    public static final String SORT_BY_REGION_COVERAGE="Region coverage";
    public static final String SORT_BY_VISIBLE_REGION_COUNT="Visible region count";
    public static final String SORT_BY_VISIBLE_REGION_COVERAGE="Visible region coverage";
    public static final String SORT_BY_REGION_SCORES_SUM="Region scores sum";
    public static final String SORT_BY_VISIBLE_REGION_SCORES_SUM="Visible region scores sum";
    public static final String SORT_BY_NUMERIC_MAP="Numeric map";
    public static final String SORT_BY_NUMERIC_TRACK_SUM="Numeric track sum";
    public static final String SORT_BY_GC_CONTENT="GC-content";
    public static final String SORT_BY_MARK="Mark";   
    public static final String SORT_BY_LOCATION="Location";      
    
    /** Creates new form SortSequencesDialog */
    public SortSequencesDialog(MotifLabGUI clientgui) {
        super(clientgui.getFrame(), true);
        client=clientgui;
        initComponents();
        DefaultComboBoxModel<String> propertyModel=new DefaultComboBoxModel<String>(getSortOptions());
        propertyCombobox.setModel(propertyModel);
        regionDatasets=getDataCandidates(RegionDataset.class,false);
        dnaDatasets=getDataCandidates(DNASequenceDataset.class,false);
        numericDatasets=getDataCandidates(NumericDataset.class,false);
        numericMaps=getDataCandidates(SequenceNumericMap.class,false);
        partitions=getDataCandidates(SequencePartition.class,true);
        groupByCombobox.setModel(partitions);
        propertyCombobox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String prop=(String)propertyCombobox.getSelectedItem();
                if (prop.equals(SORT_BY_SEQUENCE_NAME) || prop.equals(SORT_BY_SEQUENCE_LENGTH) || prop.equals(SORT_BY_MARK) || prop.equals("Organism") || prop.equals(SORT_BY_LOCATION)) {
                   trackCombobox.setModel(emptyModel);
                   trackCombobox.setEnabled(false);
                } else if (prop.startsWith("Region") || prop.startsWith("Visible region")) {
                   trackCombobox.setModel(regionDatasets);
                   trackCombobox.setEnabled(true);
                } else if (prop.equals(SORT_BY_NUMERIC_TRACK_SUM)) {
                   trackCombobox.setModel(numericDatasets);
                   trackCombobox.setEnabled(true);
                } else if (prop.equals(SORT_BY_NUMERIC_MAP)) {
                   trackCombobox.setModel(numericMaps);
                   trackCombobox.setEnabled(true);
                } else if (prop.equals(SORT_BY_GC_CONTENT)) {
                   trackCombobox.setModel(dnaDatasets);
                   trackCombobox.setEnabled(true);
                }
                pack();
            }
        });
        if (!client.getEngine().hasDataItemsOfType(SequencePartition.class)) {
            groupByLabel.setEnabled(false);
            groupByCombobox.setEnabled(false);
        }
        this.setMinimumSize(new Dimension(400,220));        
        propertyCombobox.setSelectedIndex(0);
        getRootPane().setDefaultButton(okButton);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        topPanel = new javax.swing.JPanel();
        mainPanel = new javax.swing.JPanel();
        internalPanel = new javax.swing.JPanel();
        sortByLabel = new javax.swing.JLabel();
        groupByLabel = new javax.swing.JLabel();
        directionLabel = new javax.swing.JLabel();
        propertyCombobox = new javax.swing.JComboBox();
        trackCombobox = new javax.swing.JComboBox();
        directionCombobox = new javax.swing.JComboBox();
        groupByCombobox = new javax.swing.JComboBox();
        buttonsPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(motiflab.gui.MotifLabApp.class).getContext().getResourceMap(SortSequencesDialog.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        topPanel.setMaximumSize(new java.awt.Dimension(32767, 10));
        topPanel.setName("topPanel"); // NOI18N
        topPanel.setPreferredSize(new java.awt.Dimension(400, 10));

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        getContentPane().add(topPanel, java.awt.BorderLayout.PAGE_START);

        mainPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(8, 8, 8, 8), javax.swing.BorderFactory.createEtchedBorder()));
        mainPanel.setName("mainPanel"); // NOI18N

        internalPanel.setName("internalPanel"); // NOI18N
        internalPanel.setLayout(new java.awt.GridBagLayout());

        sortByLabel.setText(resourceMap.getString("sortByLabel.text")); // NOI18N
        sortByLabel.setName("sortByLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        internalPanel.add(sortByLabel, gridBagConstraints);

        groupByLabel.setText(resourceMap.getString("groupByLabel.text")); // NOI18N
        groupByLabel.setName("groupByLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        internalPanel.add(groupByLabel, gridBagConstraints);

        directionLabel.setText(resourceMap.getString("directionLabel.text")); // NOI18N
        directionLabel.setName("directionLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        internalPanel.add(directionLabel, gridBagConstraints);

        propertyCombobox.setName("propertyCombobox"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        internalPanel.add(propertyCombobox, gridBagConstraints);

        trackCombobox.setName("trackCombobox"); // NOI18N
        internalPanel.add(trackCombobox, new java.awt.GridBagConstraints());

        directionCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ascending", "Descending" }));
        directionCombobox.setName("directionCombobox"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        internalPanel.add(directionCombobox, gridBagConstraints);

        groupByCombobox.setName("groupByCombobox"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        internalPanel.add(groupByCombobox, gridBagConstraints);

        mainPanel.add(internalPanel);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        buttonsPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 4, 4, 6));
        buttonsPanel.setName("buttonsPanel"); // NOI18N
        buttonsPanel.setPreferredSize(new java.awt.Dimension(400, 40));
        buttonsPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        okButton.setText(resourceMap.getString("okButton.text")); // NOI18N
        okButton.setMaximumSize(new java.awt.Dimension(75, 27));
        okButton.setMinimumSize(new java.awt.Dimension(75, 27));
        okButton.setName("okButton"); // NOI18N
        okButton.setPreferredSize(new java.awt.Dimension(75, 27));
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonClicked(evt);
            }
        });
        buttonsPanel.add(okButton);

        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setMaximumSize(new java.awt.Dimension(75, 27));
        cancelButton.setMinimumSize(new java.awt.Dimension(75, 27));
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.setPreferredSize(new java.awt.Dimension(75, 27));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonClicked(evt);
            }
        });
        buttonsPanel.add(cancelButton);

        getContentPane().add(buttonsPanel, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonClicked
        setVisible(false);
    }//GEN-LAST:event_cancelButtonClicked

    private void okButtonClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonClicked
          String partitionName=(String)groupByCombobox.getSelectedItem();
          if (partitionName!=null && partitionName.isEmpty()) partitionName=null;
          boolean ascending=true;
          if (((String)directionCombobox.getSelectedItem()).equals("Descending")) ascending=false;
          String trackName=null;
          if (trackCombobox.isEnabled()) {
              trackName=(String)trackCombobox.getSelectedItem();
          }         
          String compareProperty=(String)propertyCombobox.getSelectedItem();
          sortBy(compareProperty, ascending, trackName, partitionName, client);
          setVisible(false);   
    }//GEN-LAST:event_okButtonClicked

    /** Returns a list of the modes available for sorting */
    public static String[] getSortOptions() {
       return SequenceSorter.getSortOptions();
    }

    /** Returns true if the given string equals a valid sort mode */
    public static boolean isValidSortOption(String sort) {
        String[] options=getSortOptions();
        for (String option:options) {
            if (option.equalsIgnoreCase(sort)) return true;
        }
        return false;
    }
    
    /** Returns TRUE if the given sort mode requires a data object as parameter */
    public static boolean requiresSortObject(String sort) {
        return (    sort.equalsIgnoreCase(SORT_BY_REGION_COUNT)
                 || sort.equalsIgnoreCase(SORT_BY_VISIBLE_REGION_COUNT)
                 || sort.equalsIgnoreCase(SORT_BY_REGION_COVERAGE)
                 || sort.equalsIgnoreCase(SORT_BY_VISIBLE_REGION_COVERAGE)
                 || sort.equalsIgnoreCase(SORT_BY_REGION_SCORES_SUM)
                 || sort.equalsIgnoreCase(SORT_BY_VISIBLE_REGION_SCORES_SUM)
                 || sort.equalsIgnoreCase(SORT_BY_NUMERIC_TRACK_SUM)
                 || sort.equalsIgnoreCase(SORT_BY_NUMERIC_MAP)
                 || sort.equalsIgnoreCase(SORT_BY_GC_CONTENT)              
        );
    }
     
    /**
     * Sorts sequences (in default sequence collection) according to the given parameters and returns TRUE if the sort was successful
     * If the sort is unsuccessful it does not report why, but the method checkParameters(...) can be used to check
     * the parameters and throw an exception upon encountering problems  
     * @param trackName
     * @param map
     * @param compareProperty
     * @param ascending
     * @param partitionName 
     */
     public static boolean sortBy(String compareProperty, boolean ascending, String dataName, String partitionName, MotifLabClient client) {
         return SequenceSorter.sortBy(client.getEngine().getDefaultSequenceCollection(), compareProperty, ascending, dataName, partitionName, client);
     }    
    

    
    public final DefaultComboBoxModel<String> getDataCandidates(Class candidateClass, boolean topBlank) {
        ArrayList<String>candidateNames=new ArrayList<String>();
        for (Data data:client.getEngine().getAllDataItemsOfType(candidateClass)) {
            candidateNames.add(data.getName());
        }
        Collections.sort(candidateNames);
        if (topBlank) candidateNames.add(0, "");
        String[] entries=new String[candidateNames.size()];
        entries=candidateNames.toArray(entries);
        DefaultComboBoxModel<String> model=new DefaultComboBoxModel<String>(entries);
        return model;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox directionCombobox;
    private javax.swing.JLabel directionLabel;
    private javax.swing.JComboBox groupByCombobox;
    private javax.swing.JLabel groupByLabel;
    private javax.swing.JPanel internalPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton okButton;
    private javax.swing.JComboBox propertyCombobox;
    private javax.swing.JLabel sortByLabel;
    private javax.swing.JPanel topPanel;
    private javax.swing.JComboBox trackCombobox;
    // End of variables declaration//GEN-END:variables


    

}
