/*
 * SaveMotifLogoImageDialog.java
 *
 * Created on Jun 20, 2014, 12:23:41 PM
 */
package motiflab.gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Insets;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.TexturePaint;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import javax.imageio.ImageIO;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.Border;
import javax.swing.filechooser.FileNameExtensionFilter;
import motiflab.engine.MotifLabEngine;
import motiflab.engine.ParameterSettings;
import motiflab.engine.data.Motif;
import motiflab.engine.data.OutputData;
import motiflab.engine.dataformat.DataFormat;

/**
 *
 * @author kjetikl
 */
public class SaveMotifLogoImageDialog extends javax.swing.JDialog {
    
    private Motif motif;
    private MotifLogo motiflogo;
    private MotifLogoPanel logoPanel;
    private DrawingCanvas canvas;    
    private TexturePaint transparentPaint;
    private MotifLabGUI gui;

    private int logowidth=500;
    private int logoheight=200;
    private int logoX=10; // x-coordinate of logo component within canvas
    private int logoY=10; // y-coordinate of logo component within canvas
    
    private int anchorsize=7;    
    private int currentAnchor=0; // 0 is none. The anchors are numbered from 1 to 8 in a circular clockwise manner start at top left    

    /** Creates new form SaveMotifLogoImageDialog */
    public SaveMotifLogoImageDialog(MotifLabGUI gui, Motif motif, boolean modal) {
        super(gui.getFrame(), "Motif Logo: "+((motif!=null)?motif.getName():""), modal);
        this.gui=gui;
        this.motif=motif;
        Color[] basecolors=gui.getVisualizationSettings().getBaseColors();
        motiflogo=new MotifLogo(basecolors);
        motiflogo.setMotif(motif);
        motiflogo.setFontHeight(200);
        initComponents();
        logowidth=20*motif.getLength();
        logoPanel=new MotifLogoPanel();
        getRootPane().setDefaultButton(closeButton);
        widthSpinner.setValue(logowidth);
        heightSpinner.setValue(logoheight);
        this.setPreferredSize(new Dimension(800, 400));
        int tilesize=10;
        BufferedImage texture=new BufferedImage(tilesize*2, tilesize*2, BufferedImage.TYPE_INT_RGB);
        Graphics image=texture.getGraphics();
        image.setColor(new Color(224,224,224));
        image.fillRect(0, 0, tilesize*2, tilesize*2);
        image.setColor(new Color(240,240,240));
        image.fillRect(0, 0, tilesize, tilesize);
        image.fillRect(tilesize, tilesize, tilesize, tilesize);
        transparentPaint=new TexturePaint(texture, new Rectangle(0,0,tilesize*2,tilesize*2));
        
        canvas=new DrawingCanvas(logoPanel);
        JPanel inner=new JPanel(new BorderLayout());
        inner.add(canvas);
        scrollPane.setViewportView(inner); // I am using a wrapper panel with BorderLayout to property update the graphics when scrolling
                                           // since adding the DrawingCanvas (with NULL layout) directly did not work properly
        webLogoButton.setVisible(false); // this functionality is not implemented. It did not work as I had envisoned
        basecolorAbutton.setBackground(basecolors[0]);
        basecolorCbutton.setBackground(basecolors[1]);
        basecolorGbutton.setBackground(basecolors[2]);
        basecolorTbutton.setBackground(basecolors[3]);
        pack();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        topPanel = new javax.swing.JPanel();
        mainPanel = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        buttonsPanel = new javax.swing.JPanel();
        inner1 = new javax.swing.JPanel();
        controlsPanel = new javax.swing.JPanel();
        innerControlsPanel = new javax.swing.JPanel();
        widthLabel = new javax.swing.JLabel();
        widthSpinner = new javax.swing.JSpinner();
        heightLabel = new javax.swing.JLabel();
        heightSpinner = new javax.swing.JSpinner();
        gridCheckbox = new javax.swing.JCheckBox();
        transparentCheckBox = new javax.swing.JCheckBox();
        reverseCheckBox = new javax.swing.JCheckBox();
        boundingBoxCheckBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        colorspanel = new javax.swing.JPanel();
        basecolorAbutton = new javax.swing.JButton();
        basecolorCbutton = new javax.swing.JButton();
        basecolorGbutton = new javax.swing.JButton();
        basecolorTbutton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        scaleByICCheckBox = new javax.swing.JCheckBox();
        sortByFrequencyCheckBox = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        imageFormatCombobox = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        webLogoButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        topPanel.setName("topPanel"); // NOI18N

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 459, Short.MAX_VALUE)
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        getContentPane().add(topPanel, java.awt.BorderLayout.NORTH);

        mainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(6, 6, 6, 6));
        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setLayout(new java.awt.BorderLayout());

        scrollPane.setName("scrollPane"); // NOI18N
        mainPanel.add(scrollPane, java.awt.BorderLayout.CENTER);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        buttonsPanel.setName("buttonsPanel"); // NOI18N
        buttonsPanel.setLayout(new java.awt.BorderLayout());
        getContentPane().add(buttonsPanel, java.awt.BorderLayout.SOUTH);

        inner1.setName("inner1"); // NOI18N
        inner1.setLayout(new java.awt.BorderLayout());

        controlsPanel.setName("controlsPanel"); // NOI18N

        innerControlsPanel.setName("innerControlsPanel"); // NOI18N
        innerControlsPanel.setLayout(new java.awt.GridBagLayout());

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(motiflab.gui.MotifLabApp.class).getContext().getResourceMap(SaveMotifLogoImageDialog.class);
        widthLabel.setText(resourceMap.getString("widthLabel.text")); // NOI18N
        widthLabel.setName("widthLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 16, 6);
        innerControlsPanel.add(widthLabel, gridBagConstraints);

        widthSpinner.setModel(new javax.swing.SpinnerNumberModel(600, 5, 10000, 1));
        widthSpinner.setName("widthSpinner"); // NOI18N
        widthSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                logoSizeChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 4, 16, 6);
        innerControlsPanel.add(widthSpinner, gridBagConstraints);

        heightLabel.setText(resourceMap.getString("heightLabel.text")); // NOI18N
        heightLabel.setName("heightLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 16, 6);
        innerControlsPanel.add(heightLabel, gridBagConstraints);

        heightSpinner.setModel(new javax.swing.SpinnerNumberModel(50, 5, 10000, 1));
        heightSpinner.setName("heightSpinner"); // NOI18N
        heightSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                logoSizeChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 16, 6);
        innerControlsPanel.add(heightSpinner, gridBagConstraints);

        gridCheckbox.setText(resourceMap.getString("gridCheckbox.text")); // NOI18N
        gridCheckbox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridCheckbox.setName("gridCheckbox"); // NOI18N
        gridCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 2, 6, 6);
        innerControlsPanel.add(gridCheckbox, gridBagConstraints);

        transparentCheckBox.setText(resourceMap.getString("transparentCheckBox.text")); // NOI18N
        transparentCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        transparentCheckBox.setName("transparentCheckBox"); // NOI18N
        transparentCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 2, 6, 6);
        innerControlsPanel.add(transparentCheckBox, gridBagConstraints);

        reverseCheckBox.setText(resourceMap.getString("reverseCheckBox.text")); // NOI18N
        reverseCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        reverseCheckBox.setName("reverseCheckBox"); // NOI18N
        reverseCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 2, 6, 6);
        innerControlsPanel.add(reverseCheckBox, gridBagConstraints);

        boundingBoxCheckBox.setSelected(true);
        boundingBoxCheckBox.setText(resourceMap.getString("boundingBoxCheckBox.text")); // NOI18N
        boundingBoxCheckBox.setName("boundingBoxCheckBox"); // NOI18N
        boundingBoxCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 2, 6, 6);
        innerControlsPanel.add(boundingBoxCheckBox, gridBagConstraints);

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        innerControlsPanel.add(jLabel1, gridBagConstraints);

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 12, 6, 6);
        innerControlsPanel.add(jLabel2, gridBagConstraints);

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 12, 6, 6);
        innerControlsPanel.add(jLabel3, gridBagConstraints);

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        innerControlsPanel.add(jLabel4, gridBagConstraints);

        colorspanel.setName("colorspanel"); // NOI18N
        colorspanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        basecolorAbutton.setText(resourceMap.getString("basecolorAbutton.text")); // NOI18N
        basecolorAbutton.setName("basecolorAbutton"); // NOI18N
        basecolorAbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeBaseColor(evt);
            }
        });
        colorspanel.add(basecolorAbutton);

        basecolorCbutton.setText(resourceMap.getString("basecolorCbutton.text")); // NOI18N
        basecolorCbutton.setName("basecolorCbutton"); // NOI18N
        basecolorCbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeBaseColor(evt);
            }
        });
        colorspanel.add(basecolorCbutton);

        basecolorGbutton.setText(resourceMap.getString("basecolorGbutton.text")); // NOI18N
        basecolorGbutton.setName("basecolorGbutton"); // NOI18N
        basecolorGbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeBaseColor(evt);
            }
        });
        colorspanel.add(basecolorGbutton);

        basecolorTbutton.setText(resourceMap.getString("basecolorTbutton.text")); // NOI18N
        basecolorTbutton.setName("basecolorTbutton"); // NOI18N
        basecolorTbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeBaseColor(evt);
            }
        });
        colorspanel.add(basecolorTbutton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        innerControlsPanel.add(colorspanel, gridBagConstraints);

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(16, 6, 6, 6);
        innerControlsPanel.add(jLabel5, gridBagConstraints);

        scaleByICCheckBox.setSelected(true);
        scaleByICCheckBox.setText(resourceMap.getString("scaleByICCheckBox.text")); // NOI18N
        scaleByICCheckBox.setName("scaleByICCheckBox"); // NOI18N
        scaleByICCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 2, 6, 6);
        innerControlsPanel.add(scaleByICCheckBox, gridBagConstraints);

        sortByFrequencyCheckBox.setSelected(true);
        sortByFrequencyCheckBox.setText(resourceMap.getString("sortByFrequencyCheckBox.text")); // NOI18N
        sortByFrequencyCheckBox.setName("sortByFrequencyCheckBox"); // NOI18N
        sortByFrequencyCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 2, 6, 6);
        innerControlsPanel.add(sortByFrequencyCheckBox, gridBagConstraints);

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 12, 6, 6);
        innerControlsPanel.add(jLabel6, gridBagConstraints);

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        innerControlsPanel.add(jLabel7, gridBagConstraints);

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(16, 6, 6, 6);
        innerControlsPanel.add(jLabel8, gridBagConstraints);

        imageFormatCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PNG", "GIF", "JPG" }));
        imageFormatCombobox.setName("imageFormatCombobox"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(16, 2, 6, 6);
        innerControlsPanel.add(imageFormatCombobox, gridBagConstraints);

        controlsPanel.add(innerControlsPanel);

        inner1.add(controlsPanel, java.awt.BorderLayout.EAST);

        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        webLogoButton.setText(resourceMap.getString("webLogoButton.text")); // NOI18N
        webLogoButton.setName("webLogoButton"); // NOI18N
        webLogoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                webLogoButtonPressed(evt);
            }
        });
        jPanel1.add(webLogoButton);

        saveButton.setText(resourceMap.getString("saveButton.text")); // NOI18N
        saveButton.setName("saveButton"); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonPressed(evt);
            }
        });
        jPanel1.add(saveButton);

        closeButton.setText(resourceMap.getString("closeButton.text")); // NOI18N
        closeButton.setName("closeButton"); // NOI18N
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonPressed(evt);
            }
        });
        jPanel1.add(closeButton);

        inner1.add(jPanel1, java.awt.BorderLayout.SOUTH);

        getContentPane().add(inner1, java.awt.BorderLayout.EAST);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonPressed
        dispose();
        setVisible(false);
    }//GEN-LAST:event_closeButtonPressed

    private void logoSizeChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_logoSizeChanged
        if (logoPanel.isDragging()) return; // spinners were updated programmatically not by user
        logowidth=(Integer)widthSpinner.getValue();
        logoheight=(Integer)heightSpinner.getValue();        
        logoPanel.setBounds(logoPanel.getBounds());
        logoPanel.revalidate();
        if (canvas!=null) {
            canvas.setPreferredSize(canvas.getSize());
            canvas.revalidate();                              
        }
        scrollPane.revalidate();   
        repaint();
    }//GEN-LAST:event_logoSizeChanged

    private void checkboxChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxChanged
        motiflogo.setDrawBorder(boundingBoxCheckBox.isSelected());
        motiflogo.setScaleByIC(scaleByICCheckBox.isSelected());
        motiflogo.setSortByFrequency(sortByFrequencyCheckBox.isSelected());        
        repaint();
    }//GEN-LAST:event_checkboxChanged

    private void webLogoButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_webLogoButtonPressed
        sendToWebLogo();
    }//GEN-LAST:event_webLogoButtonPressed

    private void changeBaseColor(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeBaseColor
        JButton source=(JButton)evt.getSource();
        String base=source.getText();
        int index=0;
        if (base.equals("A")) index=0;
        else if (base.equals("C")) index=1;
        else if (base.equals("G")) index=2;
        else if (base.equals("T")) index=3;
        Color[] colors=motiflogo.getBaseColors();
        Color color=colors[index];
        color = JColorChooser.showDialog(rootPane, "Select new color", color);
        if (color!=null) {
            motiflogo.setBaseColor(color, index);
            switch (index) {
                case 0: basecolorAbutton.setBackground(color);break;
                case 1: basecolorCbutton.setBackground(color);break;
                case 2: basecolorGbutton.setBackground(color);break;
                case 3: basecolorTbutton.setBackground(color);break;
            }
        }        
        repaint();
    }//GEN-LAST:event_changeBaseColor

    private void saveButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonPressed
        selectFileAndSave();
    }//GEN-LAST:event_saveButtonPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton basecolorAbutton;
    private javax.swing.JButton basecolorCbutton;
    private javax.swing.JButton basecolorGbutton;
    private javax.swing.JButton basecolorTbutton;
    private javax.swing.JCheckBox boundingBoxCheckBox;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel colorspanel;
    private javax.swing.JPanel controlsPanel;
    private javax.swing.JCheckBox gridCheckbox;
    private javax.swing.JLabel heightLabel;
    private javax.swing.JSpinner heightSpinner;
    private javax.swing.JComboBox imageFormatCombobox;
    private javax.swing.JPanel inner1;
    private javax.swing.JPanel innerControlsPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JCheckBox reverseCheckBox;
    private javax.swing.JButton saveButton;
    private javax.swing.JCheckBox scaleByICCheckBox;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JCheckBox sortByFrequencyCheckBox;
    private javax.swing.JPanel topPanel;
    private javax.swing.JCheckBox transparentCheckBox;
    private javax.swing.JButton webLogoButton;
    private javax.swing.JLabel widthLabel;
    private javax.swing.JSpinner widthSpinner;
    // End of variables declaration//GEN-END:variables

    
    /** This components represents the logo itself */
    private final class MotifLogoPanel extends JPanel implements MouseListener, MouseMotionListener {
        AnchorBorder border;
        Point dragStart=null;
        Point startTopLeft=null;
        Point startBottomRight=null;
        
        public MotifLogoPanel() {
            super();
            border=new AnchorBorder();
            setBorder(border);
            addMouseListener(this); 
            addMouseMotionListener(this); 
            setOpaque(false);
        }
        
        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);          
            motiflogo.paintLogo(g, 0, 0, logowidth, logoheight, reverseCheckBox.isSelected(), transparentCheckBox.isSelected(), gridCheckbox.isSelected());            
        }

        @Override
        public Dimension getSize() {
            return new Dimension(logowidth, logoheight);
        }

        @Override
        public Rectangle getBounds() {
            return new Rectangle(logoX, logoY, logowidth, logoheight);
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            //throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public void mousePressed(MouseEvent e) {
            dragStart=e.getLocationOnScreen();
            startTopLeft=new Point(logoX,logoY);
            startBottomRight=new Point(logoX+logowidth,logoY+logoheight);
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            dragStart=null;
            startTopLeft=null;
            startBottomRight=null;    
            canvas.setPreferredSize(canvas.getSize());
            canvas.revalidate();            
            scrollPane.revalidate();    
            scrollPane.repaint();
        }

        @Override
        public void mouseEntered(MouseEvent e) {
            border.setActive(true);
            this.repaint();
        }

        @Override
        public void mouseExited(MouseEvent e) {
            border.setActive(false);
            this.repaint();            
        }

        @Override
        public void mouseDragged(MouseEvent e) {
            if (dragStart==null) return; // something is wrong...
            int offsetX=e.getLocationOnScreen().x-dragStart.x; //
            int offsetY=e.getLocationOnScreen().y-dragStart.y;
            int logoX1=startTopLeft.x;
            int logoY1=startTopLeft.y;
            int logoX2=startBottomRight.x;
            int logoY2=startBottomRight.y;            
            
            if (currentAnchor==0) { // adjust location but not size
                logoX=logoX1+offsetX;
                if (logoX<0) logoX=0;                
                logoY=logoY1+offsetY;
                if (logoY<0) logoY=0;
            } 
            else if (currentAnchor==1) { // adjust both location (x,y) and size (width, height)
                logoX=logoX1+offsetX;
                if (logoX<0) logoX=0;  
                if (logoX>startBottomRight.x-anchorsize) logoX=startBottomRight.x-anchorsize; // minimum size of logo is "anchorsize". Anchors can not be moved passed anchor on oppsite side                                
                logoY=logoY1+offsetY;
                if (logoY<0) logoY=0;
                if (logoY>startBottomRight.y-anchorsize) logoY=startBottomRight.y-anchorsize;              
            }
            else if (currentAnchor==2) { // adjust both location and size
                logoY=logoY1+offsetY;
                if (logoY<0) logoY=0;
                if (logoY>startBottomRight.y-anchorsize) logoY=startBottomRight.y-anchorsize;                  
            }
            else if (currentAnchor==3) {
                logoX2+=offsetX;
                if (logoX2<logoX1+anchorsize) logoX2=logoX1+anchorsize; // minimum size of logo is "anchorsize". Anchors can not be moved passed anchor on oppsite side               
                logoY=logoY1+offsetY;
                if (logoY<0) logoY=0;
                if (logoY>startBottomRight.y-anchorsize) logoY=startBottomRight.y-anchorsize;                   
            }
            else if (currentAnchor==4) {
                logoX2+=offsetX;
                if (logoX2<logoX1+anchorsize) logoX2=logoX1+anchorsize; // minimum size of logo is "anchorsize". Anchors can not be moved passed anchor on oppsite side                                
            }
            else if (currentAnchor==5) {
                logoX2+=offsetX;
                if (logoX2<logoX1+anchorsize) logoX2=logoX1+anchorsize; // minimum size of logo is "anchorsize". Anchors can not be moved passed anchor on oppsite side
                logoY2+=offsetY;                
                if (logoY2<logoY1+anchorsize) logoY2=logoY1+anchorsize;          
            }
            else if (currentAnchor==6) {
                logoY2+=offsetY;                
                if (logoY2<logoY1+anchorsize) logoY2=logoY1+anchorsize;                   
            }
            else if (currentAnchor==7) {
                logoX=logoX1+offsetX;
                if (logoX<0) logoX=0;  
                if (logoX>startBottomRight.x-anchorsize) logoX=startBottomRight.x-anchorsize; // minimum size of logo is "anchorsize". Anchors can not be moved passed anchor on oppsite side                                                              
                logoY2+=offsetY;                
                if (logoY2<logoY1+anchorsize) logoY2=logoY1+anchorsize;                   
            }
            else if (currentAnchor==8) {
                logoX=logoX1+offsetX;
                if (logoX<0) logoX=0;  
                if (logoX>startBottomRight.x-anchorsize) logoX=startBottomRight.x-anchorsize; // minimum size of logo is "anchorsize". Anchors can not be moved passed anchor on oppsite side                                                               
            }
            if (currentAnchor!=0) { // size has been updated so change the spinners also
                logowidth=(logoX2-logoX);
                logoheight=(logoY2-logoY);         
                widthSpinner.setValue(logowidth); // this will in turn update
                heightSpinner.setValue(logoheight);                
            }           
            setBounds(getBounds()); // updates bounds
            revalidate();
        }

        @Override
        public void mouseMoved(MouseEvent e) {
            currentAnchor=getAnchorPoint(e.getPoint());
            repaint();
        }
        
        private int getAnchorPoint(Point p) {            
            if (p.x>=0 && p.x<=anchorsize && p.y>=0 && p.y<=anchorsize) return 1; // top left
            if (p.x>=(int)((logowidth-anchorsize)/2) && p.x<=(int)((logowidth+anchorsize)/2) && p.y>=0 && p.y<=anchorsize) return 2; // top middle
            if (p.x>=logowidth-anchorsize && p.x<=logowidth && p.y>=0 && p.y<=anchorsize) return 3; // top right
            if (p.x>=logowidth-anchorsize && p.x<=logowidth && p.y>=(int)((logoheight-anchorsize)/2) && p.y<=(int)((logoheight+anchorsize)/2)) return 4; // right middle
            if (p.x>=logowidth-anchorsize && p.x<=logowidth && p.y>=logoheight-anchorsize && p.y<=logoheight) return 5; // bottom right
            if (p.x>=(int)((logowidth-anchorsize)/2) && p.x<=(int)((logowidth+anchorsize)/2) && p.y>=logoheight-anchorsize && p.y<=logoheight) return 6; // bottom middle
            if (p.x>=0 && p.x<=anchorsize && p.y>=logoheight-anchorsize && p.y<=logoheight) return 7; // bottom left
            if (p.x>=0 && p.x<=anchorsize && p.y>=(int)((logoheight-anchorsize)/2) && p.y<=(int)((logoheight+anchorsize)/2)) return 8; // left middle
            return 0;
        }
        
        public boolean isDragging() {
            return (dragStart!=null);
        }
    }
    
    
    /** This is the components that is displayed within the scrollpane */
    private class DrawingCanvas extends JPanel {
        int margin=10;
        
        public DrawingCanvas(MotifLogoPanel logo) {
            super();
            setLayout(null); // free layout
            add(logo);
            logo.setBounds(logo.getBounds());
        }

        @Override
        public void paintComponent(Graphics g) {            
            super.paintComponent(g);
            ((Graphics2D)g).setPaint(transparentPaint); 
            Dimension size=getSize();
            Dimension parentSize=getParent().getSize();
            int thiswidth=Math.max(size.width,parentSize.width);
            int thisheight=Math.max(size.height,parentSize.height);
            g.fillRect(0,0,thiswidth,thisheight);            
        }   
        
        @Override     
        public Dimension getSize() {           
            return new Dimension(logoX+logowidth+margin, logoY+logoheight+margin);
        }               
        
        @Override
        public Dimension getSize(Dimension d) {
            d.width=logoX+logowidth+margin;
            d.height=logoY+logoheight+margin;
            return d;
        }
                
    }
    
    
    private class AnchorBorder implements Border {
        Insets insets=new Insets(anchorsize,anchorsize,anchorsize,anchorsize);
        boolean active=false;
        Color borderColor=Color.MAGENTA;
        Color activeAnchorColor=new Color(128,0,128);
        
        @Override
        public Insets getBorderInsets(Component c) {
            return insets;
        }

        @Override
        public boolean isBorderOpaque() {
            return false;
        }

        public void setActive(boolean active) {
            this.active=active;
        }
        
        @Override
        public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {
            if (!active) return;
            g.setColor(borderColor);
            g.drawRect(x, y, width-1, height-1);
            g.setColor((currentAnchor==1)?activeAnchorColor:borderColor);
            g.fillRect(x, y, anchorsize, anchorsize); // top left
            g.setColor((currentAnchor==2)?activeAnchorColor:borderColor);
            g.fillRect(x+(int)((width-anchorsize)/2), y, anchorsize, anchorsize); // top middle            
            g.setColor((currentAnchor==3)?activeAnchorColor:borderColor);
            g.fillRect(x+width-anchorsize, y, anchorsize, anchorsize); // top right
            g.setColor((currentAnchor==4)?activeAnchorColor:borderColor);
            g.fillRect(x+width-anchorsize, y+(int)((height-anchorsize)/2), anchorsize, anchorsize); // right middle 
            g.setColor((currentAnchor==5)?activeAnchorColor:borderColor);
            g.fillRect(x+width-anchorsize, y+height-anchorsize, anchorsize, anchorsize); // bottom right             
            g.setColor((currentAnchor==6)?activeAnchorColor:borderColor);
            g.fillRect(x+(int)((width-anchorsize)/2), y+height-anchorsize, anchorsize, anchorsize); // bottom middle
            g.setColor((currentAnchor==7)?activeAnchorColor:borderColor);
            g.fillRect(x, y+height-anchorsize, anchorsize, anchorsize); // bottom left
            g.setColor((currentAnchor==8)?activeAnchorColor:borderColor);
            g.fillRect(x, y+(int)((height-anchorsize)/2), anchorsize, anchorsize); // left middle             
        }
        
    }
    
    
    private void selectFileAndSave() {
        String imageFormat=(String)imageFormatCombobox.getSelectedItem();
        File file=null;
        File parentDir=gui.getLastUsedDirectory();
        final JFileChooser fc = gui.getFileChooser(parentDir);
        fc.setDialogTitle("Save motif logo");
        FileNameExtensionFilter imagefilter=new FileNameExtensionFilter(imageFormat.toUpperCase()+" image", imageFormat.toLowerCase(),imageFormat.toUpperCase());                    
        fc.addChoosableFileFilter(imagefilter);
        File preselected=MotifLabEngine.getFile(parentDir, motif.getName()+"."+imageFormat.toLowerCase());
        fc.setSelectedFile(preselected);
        int returnValue=fc.showSaveDialog(rootPane);
        if (returnValue==JFileChooser.APPROVE_OPTION) {
            file=fc.getSelectedFile();
        } else {
            return;
        }
        if (file.exists()) {
            int choice=JOptionPane.showConfirmDialog(rootPane, "Overwrite existing file \""+file.getName()+"\" ?","Save Image",JOptionPane.OK_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE);
            if (choice!=JOptionPane.OK_OPTION) {
                return;
            }
        }  
        try {
           saveToFile(file,imageFormat);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(rootPane, e.getMessage(), "File Error", JOptionPane.ERROR_MESSAGE);
            return;
        }  
        // close dialog after saving
        setVisible(false);
        dispose();
    }
    
    private void saveToFile(File file, String imageFormat) throws IOException {
        if (imageFormat==null) imageFormat="png";
        imageFormat=imageFormat.toLowerCase();
        if (!(imageFormat.equals("gif") || imageFormat.equals("jpg") || imageFormat.equals("png"))) imageFormat="png";        
        BufferedImage image=new BufferedImage(logowidth, logoheight, (imageFormat.equals("jpg"))?BufferedImage.TYPE_INT_RGB:BufferedImage.TYPE_INT_ARGB);
        Graphics2D g=image.createGraphics();
        motiflogo.paintLogo(g, 0, 0, logowidth, logoheight, reverseCheckBox.isSelected(), transparentCheckBox.isSelected(), gridCheckbox.isSelected());    
        OutputStream stream=MotifLabEngine.getOutputStreamForFile(file);
        ImageIO.write(image, imageFormat, stream);
        stream.close();
        g.dispose();
        gui.logMessage(motif.getName()+" motif logo saved to: "+file.getAbsolutePath());
        gui.setLastUsedDirectory(file.getParentFile());
    }

    
    private void sendToWebLogo() {
        DataFormat dataformat=gui.getEngine().getDataFormat("BindingSequences");
        if (dataformat==null) {
            JOptionPane.showMessageDialog(rootPane, "Unable to format data in 'BindingSequences' format", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String bindingsequences=null;
        try {
            OutputData document=new OutputData("tmp");
            ParameterSettings settings=new ParameterSettings();
            settings.setParameter("When missing", "Generate random");
            settings.setParameter("Random sequences precision", new Integer(3));         
            dataformat.format(motif, document, settings, null);
            bindingsequences=document.getContentsAsString();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Unable to format data to send to WebLogo", "Error", JOptionPane.ERROR_MESSAGE);
            return;            
        }
        // ...
        // I don't know how to accomplish the rest yet.
        // Apparently, sending POST request to default browser was not as simple as I had envisoned 
        // ...
    }

}
