/*
 * RenameDataDialog.java
 *
 * Created on 3. februar 2009, 18:05
 */

package motiflab.gui;

import motiflab.engine.data.Data;
import javax.swing.undo.*;

/**
 *
 * @author  kjetikl
 */
public class RenameDataDialog extends javax.swing.JDialog {
    private MotifLabGUI gui;
    private String dataName;
    
    
    /** Creates new form RenameDataDialog */
    public RenameDataDialog(java.awt.Frame parent, MotifLabGUI gui, String dataName) {
        super(parent, "Rename "+dataName,true);
        this.gui=gui;
        this.dataName=dataName;
        initComponents();
        newNameTextField.setText(dataName);
        newNameTextField.setSelectionStart(0);
        newNameTextField.setSelectionEnd(dataName.length());
        
        this.getRootPane().setDefaultButton(OKButton);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        OKButton = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();
        newNameLabel = new javax.swing.JLabel();
        newNameTextField = new javax.swing.JTextField();
        renameInProtocolCheckBox = new javax.swing.JCheckBox();
        errorMessageLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(motiflab.gui.MotifLabApp.class).getContext().getResourceMap(RenameDataDialog.class);
        OKButton.setText(resourceMap.getString("OKButton.text")); // NOI18N
        OKButton.setMaximumSize(new java.awt.Dimension(75, 27));
        OKButton.setMinimumSize(new java.awt.Dimension(75, 27));
        OKButton.setName("OKButton"); // NOI18N
        OKButton.setPreferredSize(new java.awt.Dimension(75, 27));
        OKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKButtonPressed(evt);
            }
        });

        CancelButton.setText(resourceMap.getString("CancelButton.text")); // NOI18N
        CancelButton.setMaximumSize(new java.awt.Dimension(75, 27));
        CancelButton.setMinimumSize(new java.awt.Dimension(75, 27));
        CancelButton.setName("CancelButton"); // NOI18N
        CancelButton.setPreferredSize(new java.awt.Dimension(75, 27));
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonPressed(evt);
            }
        });

        newNameLabel.setText(resourceMap.getString("newNameLabel.text")); // NOI18N
        newNameLabel.setName("newNameLabel"); // NOI18N

        newNameTextField.setText(resourceMap.getString("newNameTextField.text")); // NOI18N
        newNameTextField.setName("newNameTextField"); // NOI18N

        renameInProtocolCheckBox.setSelected(true);
        renameInProtocolCheckBox.setText(resourceMap.getString("renameInProtocolCheckBox.text")); // NOI18N
        renameInProtocolCheckBox.setName("renameInProtocolCheckBox"); // NOI18N

        errorMessageLabel.setFont(resourceMap.getFont("errorMessageLabel.font")); // NOI18N
        errorMessageLabel.setForeground(resourceMap.getColor("errorMessageLabel.foreground")); // NOI18N
        errorMessageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        errorMessageLabel.setText(resourceMap.getString("errorMessageLabel.text")); // NOI18N
        errorMessageLabel.setMaximumSize(new java.awt.Dimension(300, 14));
        errorMessageLabel.setMinimumSize(new java.awt.Dimension(200, 14));
        errorMessageLabel.setName("errorMessageLabel"); // NOI18N
        errorMessageLabel.setPreferredSize(new java.awt.Dimension(200, 14));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(errorMessageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(renameInProtocolCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                        .addComponent(OKButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(newNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(newNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newNameLabel))
                .addGap(18, 18, 18)
                .addComponent(errorMessageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(renameInProtocolCheckBox)
                    .addComponent(OKButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void OKButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKButtonPressed
    if (!gui.getEngine().dataUpdatesIsAllowed()) {
        
         this.setVisible(false);
         return; //     
    }
    String newName=newNameTextField.getText().trim();
         if (dataName.equals(newName)) {
             this.setVisible(false);
             return; // same name -> do nothing
         }
         if (newName.equals(gui.getEngine().getDefaultSequenceCollectionName())) errorMessageLabel.setText("*** This name is reserved ***");
         else { String nameError=gui.getEngine().checkNameValidity(newName,true);
             if (nameError==null) {
                 renameDataItem(dataName,newName,renameInProtocolCheckBox.isSelected());
                 this.setVisible(false);               
             } else {
                 errorMessageLabel.setText("*** "+nameError+" ***");                      
             }          
          }
}//GEN-LAST:event_OKButtonPressed

private void cancelButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonPressed
   this.setVisible(false);
}//GEN-LAST:event_cancelButtonPressed


private void renameDataItem(String oldname, String newname, boolean renameInProtocol) {
    UndoableRenameEdit renameEdit= new UndoableRenameEdit(oldname, newname, renameInProtocol, gui);
    renameEdit.rename(oldname, newname);
    gui.getUndoManager().addEdit(renameEdit);
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelButton;
    private javax.swing.JButton OKButton;
    private javax.swing.JLabel errorMessageLabel;
    private javax.swing.JLabel newNameLabel;
    private javax.swing.JTextField newNameTextField;
    private javax.swing.JCheckBox renameInProtocolCheckBox;
    // End of variables declaration//GEN-END:variables


/**
 * The following class wraps the rename method in an UndoableEdit so that renames can be posted to the Undo-queue
 * @author kjetikl
 */
private class UndoableRenameEdit extends AbstractUndoableEdit {
    private MotifLabGUI gui;
    private String oldname;
    private String newname;
    private boolean renameInProtocol;
    private RecordingCompoundEdit protocolUndoObject;

    
    public UndoableRenameEdit(String oldname, String newname, boolean renameInProtocol, MotifLabGUI gui) {
        super();
        this.oldname=oldname;
        this.newname=newname;
        this.renameInProtocol=renameInProtocol;
        this.gui=gui;       
    }
    
    /** This is the method that does the actual work!*/
    public void rename(String oldDataName, String newDataName) {
        if (!gui.getEngine().dataUpdatesIsAllowed()) return;
        boolean renamed=silentRename(oldDataName, newDataName);
        if (renamed && renameInProtocol) { // rename in Protocol-script
           protocolUndoObject=new RecordingCompoundEdit();
           gui.getUndoManager().forwardUndoEvents(protocolUndoObject); // this will stop the protocol from dividing the rename into smaller undo events
           gui.getProtocolEditor().replaceExpression("\\b"+oldDataName+"\\b", newDataName);
           protocolUndoObject.end();
           gui.getUndoManager().forwardUndoEvents(null);        
        }   
    }
       
    /** Renames the dataitem all places except the protocol*/
    private boolean silentRename(String oldDataName, String newDataName) {
        try {
            Data item=gui.getEngine().renameDataItem(oldDataName, newDataName); // renames key in storage and updated Data item itself
            gui.getVisualizationSettings().renameDataItem(oldDataName, newDataName);
            gui.getVisualizationSettings().notifyListenersOfDataRenameEvent(oldDataName,newDataName); // this will notify listeners like SequenceVisualizer. It is OK to have this method associated with the GUI, since renaming can only be done with the GUI
            item.notifyListenersOfDataUpdate(); 
            return true;
        } catch (Exception e) {
            return false;
        }
    }
    
    
    @Override
    public String getPresentationName() {
	return "Rename "+oldname;
    }    
       
    @Override
    public void undo() throws CannotUndoException {
       super.undo();
       silentRename(newname, oldname); 
       if (protocolUndoObject!=null) protocolUndoObject.undo();
    }
    
    @Override
    public void redo() throws CannotRedoException {
       super.redo();
       silentRename(oldname, newname); 
       if (protocolUndoObject!=null) protocolUndoObject.redo();
    }
    
    
}



}



